{
  "component_name": "Progress",
  "component_description": "Progress is used to display:\nThe current progress of a long operation.\nThe completion in percentage of an operation.",
  "props": {},
  "examples": [
    {
      "example_name": "Basic",
      "example_description": "Render a progress bar by specifying `value` prop.\n```jsx live\n<Progress value={50} />\n```",
      "code": "<Progress value={50} />",
      "purpose_description": "This example demonstrates how to render a basic progress bar using the `Progress` component by specifying a `value` prop. The `value` prop determines the progress percentage displayed by the progress bar.",
      "technical_description": "The example utilizes a `Progress` component, which is likely a pre-defined component designed to visually represent progress. By passing a `value` prop set to 50, the component is instructed to display a progress bar that is 50% filled. This is a straightforward implementation that relies on the component's internal logic to interpret the `value` prop and render the corresponding visual representation of progress.",
      "patterns_description": "This example demonstrates a common pattern in React where a component's behavior and appearance are controlled via props. The `Progress` component abstracts the complexity of rendering a progress bar, allowing users to simply specify a `value` to control its state. This pattern promotes reusability and separation of concerns, as the component encapsulates the logic for rendering progress.",
      "use_cases_description": "This example is particularly useful in scenarios where a visual representation of progress is needed, such as in file uploads, task completion tracking, or loading indicators. It provides a simple and effective way to convey progress to users, enhancing user experience by giving visual feedback on ongoing processes."
    },
    {
      "example_name": "With markers",
      "example_description": "Progress allows to show markers to indicate milestones of a whole progress.\n```jsx live\n<>\n  <Box sx={{ width: 300 }}>\n    <Progress\n      value={50}\n      markers={[\n        { value: 20, text: 'Bad', intent: 'red' },\n        { value: 80, text: 'Good', intent: 'dodger-blue-light-30' },\n      ]}\n    />\n  </Box>\n  <br />\n  <Box sx={{ height: 200 }}>\n    <Progress\n      value={50}\n      variant=\"vertical\"\n      status=\"custom\"\n      intent=\"success\"\n      markers={[{ value: 80, text: 'Average', intent: 'dodger-blue-light-30' }]}\n    />\n  </Box>\n</>\n```",
      "code": "<>\n  <Box sx={{ width: 300 }}>\n    <Progress\n      value={50}\n      markers={[\n        { value: 20, text: 'Bad', intent: 'red' },\n        { value: 80, text: 'Good', intent: 'dodger-blue-light-30' },\n      ]}\n    />\n  </Box>\n  <br />\n  <Box sx={{ height: 200 }}>\n    <Progress\n      value={50}\n      variant=\"vertical\"\n      status=\"custom\"\n      intent=\"success\"\n      markers={[{ value: 80, text: 'Average', intent: 'dodger-blue-light-30' }]}\n    />\n  </Box>\n</>",
      "purpose_description": "The purpose of this example is to demonstrate how to use the Progress component with markers to indicate specific milestones within the progress bar. This is useful for visually representing key points or thresholds within a progress range, enhancing the user's understanding of the progress context.",
      "technical_description": "The example uses the Progress component within a Box container to display progress bars with markers. The first Progress component is horizontal, with a width of 300 pixels, and includes markers at 20% and 80% of the progress bar. The second Progress component is vertical, with a height of 200 pixels, and includes a single marker at 80%. The markers are represented as objects with properties such as 'value', 'text', and 'intent', which define their position, label, and color respectively. The 'value' prop of the Progress component determines the current progress level, while the 'variant' prop specifies the orientation of the progress bar (horizontal or vertical).",
      "patterns_description": "This example demonstrates the use of markers within a progress bar to provide additional context and information. It utilizes the concept of props to customize the appearance and behavior of the Progress component, showcasing how React components can be made flexible and reusable. The use of Box components for layout management is a common pattern in React applications, allowing for easy styling and positioning of elements.",
      "use_cases_description": "This example is particularly useful in scenarios where progress needs to be tracked against specific milestones, such as in project management dashboards, educational platforms tracking course completion, or fitness apps monitoring workout progress. The ability to visually indicate milestones helps users quickly assess their progress relative to key goals or thresholds."
    },
    {
      "example_name": "With statuses",
      "example_description": "`status` can be `active` (default), `exception` or `custom`:\n`active`: the progress of operation is normal, progress intent and information rendering will be controlled by the component itself.\n`exception`: there are something wrong with the operation, an error icon will be rendered instead of progress value.\n`custom`: use this along with `intent` prop to customise progress intent for your own need.\n```jsx live\n<div style={{ margin: 0, padding: 0 }}>\n  <div style={{ maxWidth: '400px', margin: 0, padding: 0 }}>\n    <Progress value={0} status=\"active\" />\n    <Progress value={50} status=\"active\" />\n    <Progress value={100} status=\"active\" />\n    <br />\n    <Progress value={0} status=\"exception\" />\n    <Progress value={50} status=\"exception\" />\n    <Progress value={100} status=\"exception\" />\n    <br />\n    <Progress value={30} status=\"custom\" />\n    <Progress value={50} status=\"custom\" intent=\"success\" />\n    <Progress value={80} status=\"custom\" intent=\"warning\" />\n    <Progress value={30} status=\"custom\" intent=\"error\" />\n    <Progress value={50} status=\"custom\" intent=\"danger\" />\n    <Progress value={80} status=\"custom\" intent=\"archived\" />\n    <Progress value={30} status=\"custom\" intent=\"red-light-30\" />\n    <Progress value={50} status=\"custom\" intent=\"yellow\" />\n    <Progress value={80} status=\"custom\" intent=\"blue-light-30\" />\n  </div>\n  <br />\n  <Box\n    sx={{\n      height: 200,\n      width: 250,\n      display: 'flex',\n      justifyContent: 'space-between',\n    }}\n  >\n    <Progress value={50} variant=\"vertical\" status=\"custom\" intent=\"primary\" />\n    <Progress value={40} variant=\"vertical\" status=\"custom\" intent=\"success\" />\n    <Progress value={60} variant=\"vertical\" status=\"custom\" intent=\"danger\" />\n    <Progress value={30} variant=\"vertical\" status=\"custom\" intent=\"warning\" />\n    <Progress\n      value={80}\n      variant=\"vertical\"\n      status=\"custom\"\n      intent=\"blue-light-30\"\n    />\n  </Box>\n  <br />\n  <Box sx={{ display: 'flex', gap: 'small' }}>\n    <Progress.Circle value={0} status=\"active\" />\n    <Progress.Circle value={50} status=\"active\" />\n    <Progress.Circle value={100} status=\"active\" />\n  </Box>\n  <Box mt=\"medium\" sx={{ display: 'flex', gap: 'small' }}>\n    <Progress.Circle value={0} status=\"exception\" />\n    <Progress.Circle value={50} status=\"exception\" />\n    <Progress.Circle value={100} status=\"exception\" />\n  </Box>\n  <Box mt=\"medium\" sx={{ display: 'flex', gap: 'small' }}>\n    <Progress.Circle value={30} status=\"custom\" />\n    <Progress.Circle value={50} status=\"custom\" intent=\"success\" />\n    <Progress.Circle value={80} status=\"custom\" intent=\"warning\" />\n  </Box>\n  <Box mt=\"medium\" sx={{ display: 'flex', gap: 'small' }}>\n    <Progress.Circle value={30} status=\"custom\" intent=\"error\" />\n    <Progress.Circle value={50} status=\"custom\" intent=\"danger\" />\n    <Progress.Circle value={80} status=\"custom\" intent=\"archived\" />\n  </Box>\n  <Box mt=\"medium\" sx={{ display: 'flex', gap: 'small' }}>\n    <Progress.Circle value={30} status=\"custom\" intent=\"red-light-30\" />\n    <Progress.Circle value={50} status=\"custom\" intent=\"yellow\" />\n    <Progress.Circle value={80} status=\"custom\" intent=\"blue-light-30\" />\n  </Box>\n</div>\n```",
      "code": "<div style={{ margin: 0, padding: 0 }}>\n  <div style={{ maxWidth: '400px', margin: 0, padding: 0 }}>\n    <Progress value={0} status=\"active\" />\n    <Progress value={50} status=\"active\" />\n    <Progress value={100} status=\"active\" />\n    <br />\n    <Progress value={0} status=\"exception\" />\n    <Progress value={50} status=\"exception\" />\n    <Progress value={100} status=\"exception\" />\n    <br />\n    <Progress value={30} status=\"custom\" />\n    <Progress value={50} status=\"custom\" intent=\"success\" />\n    <Progress value={80} status=\"custom\" intent=\"warning\" />\n    <Progress value={30} status=\"custom\" intent=\"error\" />\n    <Progress value={50} status=\"custom\" intent=\"danger\" />\n    <Progress value={80} status=\"custom\" intent=\"archived\" />\n    <Progress value={30} status=\"custom\" intent=\"red-light-30\" />\n    <Progress value={50} status=\"custom\" intent=\"yellow\" />\n    <Progress value={80} status=\"custom\" intent=\"blue-light-30\" />\n  </div>\n  <br />\n  <Box\n    sx={{\n      height: 200,\n      width: 250,\n      display: 'flex',\n      justifyContent: 'space-between',\n    }}\n  >\n    <Progress value={50} variant=\"vertical\" status=\"custom\" intent=\"primary\" />\n    <Progress value={40} variant=\"vertical\" status=\"custom\" intent=\"success\" />\n    <Progress value={60} variant=\"vertical\" status=\"custom\" intent=\"danger\" />\n    <Progress value={30} variant=\"vertical\" status=\"custom\" intent=\"warning\" />\n    <Progress\n      value={80}\n      variant=\"vertical\"\n      status=\"custom\"\n      intent=\"blue-light-30\"\n    />\n  </Box>\n  <br />\n  <Box sx={{ display: 'flex', gap: 'small' }}>\n    <Progress.Circle value={0} status=\"active\" />\n    <Progress.Circle value={50} status=\"active\" />\n    <Progress.Circle value={100} status=\"active\" />\n  </Box>\n  <Box mt=\"medium\" sx={{ display: 'flex', gap: 'small' }}>\n    <Progress.Circle value={0} status=\"exception\" />\n    <Progress.Circle value={50} status=\"exception\" />\n    <Progress.Circle value={100} status=\"exception\" />\n  </Box>\n  <Box mt=\"medium\" sx={{ display: 'flex', gap: 'small' }}>\n    <Progress.Circle value={30} status=\"custom\" />\n    <Progress.Circle value={50} status=\"custom\" intent=\"success\" />\n    <Progress.Circle value={80} status=\"custom\" intent=\"warning\" />\n  </Box>\n  <Box mt=\"medium\" sx={{ display: 'flex', gap: 'small' }}>\n    <Progress.Circle value={30} status=\"custom\" intent=\"error\" />\n    <Progress.Circle value={50} status=\"custom\" intent=\"danger\" />\n    <Progress.Circle value={80} status=\"custom\" intent=\"archived\" />\n  </Box>\n  <Box mt=\"medium\" sx={{ display: 'flex', gap: 'small' }}>\n    <Progress.Circle value={30} status=\"custom\" intent=\"red-light-30\" />\n    <Progress.Circle value={50} status=\"custom\" intent=\"yellow\" />\n    <Progress.Circle value={80} status=\"custom\" intent=\"blue-light-30\" />\n  </Box>\n</div>",
      "purpose_description": "This example demonstrates the use of a Progress component with different statuses and intents to visually represent the progress of an operation. It showcases how the component can be customized to reflect various states such as active, exception, and custom intents, providing a flexible way to convey progress information in a UI.",
      "technical_description": "The example uses a Progress component that can render both linear and circular progress indicators. The component accepts a 'value' prop to determine the progress percentage and a 'status' prop to define the visual state of the progress. The 'status' can be 'active', 'exception', or 'custom'. When 'custom' is used, an additional 'intent' prop can be specified to further customize the appearance. The example also demonstrates vertical progress bars and circular progress indicators using the 'variant' and 'Progress.Circle' components, respectively. The layout is managed using inline styles and a Box component with the 'sx' prop for styling.",
      "patterns_description": "This example demonstrates several React patterns and best practices, including:\n- Conditional rendering based on props, allowing the component to change its appearance and behavior dynamically.\n- Use of inline styles and CSS-in-JS for flexible styling solutions.\n- Component composition, where different variants of the Progress component (linear, vertical, circular) are used to achieve diverse UI layouts.\n- Separation of concerns by using props to control component behavior and appearance, making the component reusable and customizable.",
      "use_cases_description": "This example is particularly useful in scenarios where visual feedback on the progress of an operation is needed. It can be applied in dashboards, data upload/download interfaces, or any application requiring progress tracking. The ability to customize the intent and status makes it adaptable to various contexts, such as indicating errors, success, or warnings, enhancing user experience by providing clear visual cues."
    },
    {
      "example_name": "Customise value rendering",
      "example_description": "By default, hero-design renders progress value with `%`, to customise this behavior, we can use `valueRenderer` prop.\n```jsx live\nfunction App() {\n  function valueRenderer(value) {\n    if (value < 50) {\n      return '<50';\n    }\n    return '>50';\n  }\n\n  return (\n    <div style={{ margin: 0, padding: 0 }}>\n      <div style={{ maxWidth: '400px', margin: 0, padding: 0 }}>\n        <Progress value={0} size=\"medium\" valueRenderer={valueRenderer} />\n        <Progress value={50} size=\"medium\" valueRenderer={valueRenderer} />\n        <Progress value={100} size=\"medium\" valueRenderer={valueRenderer} />\n      </div>\n      <Box mt=\"medium\" sx={{ display: 'flex', gap: 'small' }}>\n        <Progress.Circle\n          value={0}\n          size=\"medium\"\n          valueRenderer={valueRenderer}\n        />\n        <Progress.Circle\n          value={50}\n          size=\"medium\"\n          valueRenderer={valueRenderer}\n        />\n        <Progress.Circle\n          value={100}\n          size=\"medium\"\n          valueRenderer={valueRenderer}\n        />\n      </Box>\n    </div>\n  );\n}\n```",
      "code": "function App() {\n  function valueRenderer(value) {\n    if (value < 50) {\n      return '<50';\n    }\n    return '>50';\n  }\n\n  return (\n    <div style={{ margin: 0, padding: 0 }}>\n      <div style={{ maxWidth: '400px', margin: 0, padding: 0 }}>\n        <Progress value={0} size=\"medium\" valueRenderer={valueRenderer} />\n        <Progress value={50} size=\"medium\" valueRenderer={valueRenderer} />\n        <Progress value={100} size=\"medium\" valueRenderer={valueRenderer} />\n      </div>\n      <Box mt=\"medium\" sx={{ display: 'flex', gap: 'small' }}>\n        <Progress.Circle\n          value={0}\n          size=\"medium\"\n          valueRenderer={valueRenderer}\n        />\n        <Progress.Circle\n          value={50}\n          size=\"medium\"\n          valueRenderer={valueRenderer}\n        />\n        <Progress.Circle\n          value={100}\n          size=\"medium\"\n          valueRenderer={valueRenderer}\n        />\n      </Box>\n    </div>\n  );\n}",
      "purpose_description": "The purpose of this example is to demonstrate how to customize the rendering of progress values in a progress bar component using the `valueRenderer` prop. Instead of displaying the default percentage values, the example shows how to render custom text based on the progress value.",
      "technical_description": "The example defines a React component `App` that uses a custom function `valueRenderer` to determine how progress values are displayed. The `valueRenderer` function takes a numeric value as an argument and returns a string based on the value: '<50' for values less than 50, and '>50' for values 50 and above. This function is passed to the `Progress` and `Progress.Circle` components via the `valueRenderer` prop, allowing for customized display of progress values. The `Progress` components are rendered with different values (0, 50, 100) to demonstrate the custom rendering logic in action. The layout is structured using inline styles and a `Box` component to arrange the progress indicators.",
      "patterns_description": "This example demonstrates the use of function props to customize component behavior, a common pattern in React for enhancing component flexibility. It also illustrates the use of conditional rendering within the `valueRenderer` function to provide different outputs based on input values. The use of inline styles and a layout component (`Box`) for styling and arranging components is also notable.",
      "use_cases_description": "This example is particularly useful in scenarios where the default progress value display does not meet specific design requirements or user preferences. It can be applied in applications where progress indicators need to convey more meaningful or context-specific information, such as in dashboards, data visualization tools, or any UI requiring customized feedback on progress metrics."
    }
  ]
}