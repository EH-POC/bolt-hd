{
  "component_name": "Select",
  "component_description": "Select component to select options from a list.",
  "props": {
    "aria-labelledby": {
      "name": "aria-labelledby",
      "type": "string",
      "required": false,
      "description": "HTML ID of an element that should be used as the label (for assistive tech)."
    },
    "autoComplete": {
      "name": "autoComplete",
      "type": "string",
      "required": false,
      "description": "Specify the [automated assistance](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) in filling out form field values by the browser."
    },
    "className": {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "A space-delimited list of class names to pass along to the element."
    },
    "data-test-id": {
      "name": "data-test-id",
      "type": "string",
      "required": false,
      "description": "Testing id of the element."
    },
    "disabled": {
      "name": "disabled",
      "type": "boolean",
      "required": false,
      "description": "Whether the select is disabled."
    },
    "id": {
      "name": "id",
      "type": "string",
      "required": false,
      "description": "Id of <input> element."
    },
    "invalid": {
      "name": "invalid",
      "type": "boolean",
      "required": false,
      "description": "Whether the input is invalid."
    },
    "loading": {
      "name": "loading",
      "type": "boolean",
      "required": false,
      "description": "Loading state of Select, which will render a spinner at bottom of the option list."
    },
    "name": {
      "name": "name",
      "type": "string",
      "required": false,
      "description": "Name of <input> element, is used to refer to the form data for submission."
    },
    "noResults": {
      "name": "noResults",
      "type": "ReactNode",
      "required": false,
      "description": "Content to render when filtering items returns zero results."
    },
    "onBlur": {
      "name": "onBlur",
      "type": "(e: FocusEvent<HTMLInputElement>) => void",
      "required": false,
      "description": "Blur event handler."
    },
    "onChange": {
      "name": "onChange",
      "type": "(value: Array<V>) => void",
      "required": true,
      "description": "onChange event handler."
    },
    "onCreateNewOption": {
      "name": "onCreateNewOption",
      "type": "(optionText: string) => void",
      "required": false,
      "description": "Callback to allow to create new option when option not found based on query (only when the callback is defined)."
    },
    "onFocus": {
      "name": "onFocus",
      "type": "(e: FocusEvent<HTMLInputElement>) => void",
      "required": false,
      "description": "Focus event handler."
    },
    "onKeyDown": {
      "name": "onKeyDown",
      "type": "(e: KeyboardEvent) => void",
      "required": false,
      "description": "Event handler on key down of input."
    },
    "onKeyUp": {
      "name": "onKeyUp",
      "type": "(e: KeyboardEvent) => void",
      "required": false,
      "description": "Event handler on key up of input."
    },
    "onQueryChange": {
      "name": "onQueryChange",
      "type": "(query: string) => void",
      "required": false,
      "description": "Callback invoked when the query string changes."
    },
    "onScrollListToBottom": {
      "name": "onScrollListToBottom",
      "type": "() => void",
      "required": false,
      "description": "Handle scroll event when scrolling to the bottom of the option list."
    },
    "optionMenuStyle": {
      "name": "optionMenuStyle",
      "type": "CSSProperties",
      "required": false,
      "description": "Additonal inline style for option menu dropdown."
    },
    "optionPredicate": {
      "name": "optionPredicate",
      "type": "(query: string) => (option: T) => boolean",
      "required": false,
      "description": "Customise option predicater."
    },
    "optionRenderer": {
      "name": "optionRenderer",
      "type": "(renderOpts: { index: number; option: T }) => ReactElement",
      "required": false,
      "description": "Customise option renderer."
    },
    "options": {
      "name": "options",
      "type": "Array<GroupedMultiOption<V, T>> | Array<T>",
      "required": true,
      "description": "An array of (grouped) options to be selected.\n\nThe generic parameter T should extend BaseOption:\n\ntype BaseOption = {\n  disabled?: boolean;\n  helpText?: string;\n  text: string;\n  value: string | number;\n};\n\ntype GroupedOption<T> = {\n  category: string;\n  options: T[];\n};"
    },
    "placeholder": {
      "name": "placeholder",
      "type": "string",
      "required": false,
      "description": "Placeholder text in the absence of any value."
    },
    "prefix": {
      "name": "prefix",
      "type": "\"number\" | \"warning\" | \"bold\" | \"cancel\" | \"remove\" | \"menu\" | \"table\" | \"image\" | \"switch\" | \"target\" | \"restart\" | \"list\" | \"loading\" | \"file\" | \"directory\" | \"document\" | \"feed\" | \"location\" | \"move\" | \"activate\" | \"add-emoji\" | \"add-person\" | \"adjustment\" | \"alignment\" | \"archive\" | \"backward-arrow\" | \"bank\" | \"bell\" | \"billing\" | \"bookmark\" | \"box-check\" | \"box\" | \"buildings\" | \"cake\" | \"calendar-clock\" | \"calendar\" | \"candy-box-menu\" | \"carat-down-small\" | \"carat-down\" | \"carat-left\" | \"carat-right\" | \"carat-up-small\" | \"carat-up\" | \"circle-add\" | \"circle-cancel\" | \"circle-check\" | \"circle-down\" | \"circle-info\" | \"circle-left\" | \"circle-ok\" | \"circle-pencil\" | \"circle-question\" | \"circle-remove\" | \"circle-right\" | \"circle-up\" | \"circle-warning\" | \"clock-3\" | \"clock\" | \"cloud-download\" | \"cloud-upload\" | \"cog\" | \"coin\" | \"contacts\" | \"corner-resize\" | \"credit-card\" | \"diamond\" | \"direction-arrows\" | \"dollar-coin-shine\" | \"dot-filled\" | \"double-buildings\" | \"edit-template\" | \"envelope\" | \"expense\" | \"eye-circle\" | \"eye-invisible\" | \"eye\" | \"face-meh\" | \"face-sad\" | \"face-smiley\" | \"feedbacks\" | \"file-certified\" | \"file-clone\" | \"file-copy\" | \"file-csv\" | \"file-dispose\" | \"file-doc\" | \"file-excel\" | \"file-export\" | \"file-lock\" | \"file-pdf\" | \"file-powerpoint\" | \"file-search\" | \"file-secured\" | \"file-sheets\" | \"file-slide\" | \"file-verified\" | \"file-word\" | \"flask\" | \"folder-user\" | \"folder\" | \"format-bold\" | \"format-heading1\" | \"format-heading2\" | \"format-italic\" | \"format-list-bulleted\" | \"format-list-numbered\" | \"format-underlined\" | \"forward-arrow\" | \"funnel-filter\" | \"gauge\" | \"global-dollar\" | \"globe\" | \"graduation-cap\" | \"graph\" | \"happy-sun\" | \"health-bag\" | \"heart\" | \"home\" | \"import\" | \"incident-siren\" | \"instapay\" | \"loading-2\" | \"lock\" | \"looks-one\" | \"looks-two\" | \"mandatory\" | \"media-content\" | \"moneybag\" | \"moon\" | \"multiple-stars\" | \"multiple-users\" | \"node\" | \"open-folder\" | \"paperclip\" | \"payment-summary\" | \"pencil\" | \"phone\" | \"piggy-bank\" | \"pin\" | \"plane\" | \"play-circle\" | \"print\" | \"raising-hands\" | \"rectangle-mandatory\" | \"reply-arrow\" | \"reply\" | \"reschedule\" | \"rostering\" | \"save\" | \"schedule-send\" | \"schedule\" | \"search-person\" | \"send\" | \"speaker\" | \"star-award\" | \"star-badge\" | \"star-medal\" | \"star\" | \"steps-circle\" | \"stopwatch\" | \"suitcase\" | \"survey\" | \"swag\" | \"tag\" | \"teams\" | \"thumb-down\" | \"thumb-up\" | \"timesheet\" | \"touch-id\" | \"trash-bin\" | \"unlock\" | \"user\" | \"video-1\" | \"video-2\" | \"wrench\" | \"academic-hat-outlined\" | \"activate-outlined\" | \"add-person-outlined\" | \"add-section-outlined\" | \"add-time-outlined\" | \"add\" | \"adjustment-outlined\" | \"afternoon-outlined\" | \"alignment-2-outlined\" | \"alignment-outlined\" | \"all-caps\" | \"arrow-down\" | \"arrow-left\" | \"arrow-right\" | \"arrow-up\" | \"at-sign\" | \"bell-outlined\" | \"billing-outlined\" | \"billing-pound-outlined\" | \"body-outlined\" | \"bookmark-outlined\" | \"box-check-outlined\" | \"box-outlined\" | \"briefcase-clock-outlined\" | \"briefcase-search-outlined\" | \"bullet-points\" | \"cake-outlined\" | \"calendar-dates-outlined\" | \"calendar-star-outlined\" | \"camera-outlined\" | \"chat-outlined\" | \"checkmark\" | \"circle-add-outlined\" | \"circle-cancel-outlined\" | \"circle-down-outlined\" | \"circle-info-outlined\" | \"circle-left-outlined\" | \"circle-ok-outlined\" | \"circle-question-outlined\" | \"circle-remove-outlined\" | \"circle-right-outlined\" | \"circle-up-outlined\" | \"circle-warning-outlined\" | \"clipboard-check-outlined\" | \"clipboard-text-outlined\" | \"clock-2-outlined\" | \"clock-outlined\" | \"cog-outlined\" | \"coin-outlined\" | \"coin-pound-outlined\" | \"coin-stack-outlined\" | \"collapse-outlined\" | \"comment-outlined\" | \"contacts-outlined\" | \"content-copy-outlined\" | \"copy-outlined\" | \"credit-card-outlined\" | \"cup-outlined\" | \"cut-outlined\" | \"desktop-computer-outlined\" | \"diagram-outlined\" | \"diamond-outlined\" | \"direction-arrows-outlined\" | \"directory-outlined\" | \"document-outlined\" | \"dollar-coin-shine-outlined\" | \"dollar-sign\" | \"donut-chart-outlined\" | \"double-buildings-outlined\" | \"double-left-arrows\" | \"double-right-arrows\" | \"download-outlined\" | \"edit-template-outlined\" | \"edit-user-outlined\" | \"email-outlined\" | \"enter-arrow\" | \"envelope-outlined\" | \"evening-outlined\" | \"expand-outlined\" | \"expense-outlined\" | \"external-link\" | \"eye-invisible-outlined\" | \"eye-outlined\" | \"face-id\" | \"face-meh-outlined\" | \"face-open-smiley-outlined\" | \"face-sad-outlined\" | \"face-smiley-outlined\" | \"feed-outlined\" | \"feedbacks-outlined\" | \"file-certified-outlined\" | \"file-clone-outlined\" | \"file-copy-outlined\" | \"file-dispose-outlined\" | \"file-download-outlined\" | \"file-export-outlined\" | \"file-lock-outlined\" | \"file-outlined\" | \"file-search-outlined\" | \"file-secured-outlined\" | \"file-text-outlined\" | \"file-verified-outlined\" | \"filter-outlined\" | \"fire-outlined\" | \"flag-outlined\" | \"folder-outlined\" | \"folder-user-outlined\" | \"funnel-filter-outline\" | \"gauge-outlined\" | \"gift-outlined\" | \"graph-outlined\" | \"happy-sun-outlined\" | \"health-bag-outlined\" | \"heart-outlined\" | \"home-outlined\" | \"image-outlined\" | \"import-outlined\" | \"instapay-outlined\" | \"italic\" | \"link-1\" | \"link-2\" | \"list-outlined\" | \"location-outlined\" | \"lock-outlined\" | \"locked-file-outlined\" | \"log-out\" | \"magic-outlined\" | \"media-content-outlined\" | \"menu-close\" | \"menu-expand\" | \"menu-fold-outlined\" | \"menu-unfold-outlined\" | \"mobile-phone-1-outlined\" | \"moneybag-outlined\" | \"moneybag-pound-outlined\" | \"moon-outlined\" | \"more-horizontal\" | \"more-vertical\" | \"morning-outlined\" | \"multiple-folders-outlined\" | \"multiple-users-outlined\" | \"node-outlined\" | \"number-points\" | \"passport-outlined\" | \"payment-summary-outlined\" | \"payslip-outlined\" | \"pencil-outlined\" | \"percentage\" | \"phone-outlined\" | \"piggy-bank-outlined\" | \"pin-outlined\" | \"plane-outlined\" | \"play-circle-outlined\" | \"pound-sign\" | \"print-outlined\" | \"qr-code-outlined\" | \"re-assign\" | \"redeem\" | \"refresh\" | \"reply-outlined\" | \"return-arrow\" | \"ringgit-sign\" | \"rocket-outlined\" | \"rostering-outlined\" | \"save-outlined\" | \"schedule-outlined\" | \"search-outlined\" | \"send-outlined\" | \"share-1\" | \"share-2\" | \"shield-check-outlined\" | \"single-down-arrow\" | \"single-left-arrow\" | \"single-right-arrow\" | \"single-up-arrow\" | \"sparkle-2-outlined\" | \"sparkle-outlined\" | \"speaker-outlined\" | \"speed-outlined\" | \"star-outlined\" | \"stopwatch-outlined\" | \"strikethrough\" | \"suitcase-outlined\" | \"survey-outlined\" | \"switch-outlined\" | \"sync\" | \"tablet-outlined\" | \"target-outlined\" | \"thumb-up-outlined\" | \"timesheet-outlined\" | \"transfer\" | \"trash-bin-outlined\" | \"trash-outlined\" | \"unavailable\" | \"underline\" | \"unlinked\" | \"unlock-outlined\" | \"upload-outlined\" | \"user-add-outlined\" | \"user-circle-outlined\" | \"user-move-outlined\" | \"user-out-outlined\" | \"user-outlined\" | \"user-rectangle-outlined\" | \"user-remove-outlined\" | \"user-warning-outlined\" | \"video-1-outlined\" | \"video-2-outlined\" | \"wallet-outlined\" | \"wrench-outlined\" | ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Name of Icon or an Icon element to render on the left side of the input."
    },
    "query": {
      "name": "query",
      "type": "string",
      "required": false,
      "description": "Query string to filter options. This value is controlled: its state if defined must be managed externally."
    },
    "selectedOptionRenderer": {
      "name": "selectedOptionRenderer",
      "type": "(renderOpts: { option: T }) => string | ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Customise selected option renderer."
    },
    "size": {
      "name": "size",
      "type": "\"small\" | \"medium\" | \"large\"",
      "required": false,
      "description": "The size of the input box."
    },
    "style": {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "Additional inline style to be applied for the most outer element of the component."
    },
    "suffix": {
      "name": "suffix",
      "type": "\"number\" | \"warning\" | \"bold\" | \"cancel\" | \"remove\" | \"menu\" | \"table\" | \"image\" | \"switch\" | \"target\" | \"restart\" | \"list\" | \"loading\" | \"file\" | \"directory\" | \"document\" | \"feed\" | \"location\" | \"move\" | \"activate\" | \"add-emoji\" | \"add-person\" | \"adjustment\" | \"alignment\" | \"archive\" | \"backward-arrow\" | \"bank\" | \"bell\" | \"billing\" | \"bookmark\" | \"box-check\" | \"box\" | \"buildings\" | \"cake\" | \"calendar-clock\" | \"calendar\" | \"candy-box-menu\" | \"carat-down-small\" | \"carat-down\" | \"carat-left\" | \"carat-right\" | \"carat-up-small\" | \"carat-up\" | \"circle-add\" | \"circle-cancel\" | \"circle-check\" | \"circle-down\" | \"circle-info\" | \"circle-left\" | \"circle-ok\" | \"circle-pencil\" | \"circle-question\" | \"circle-remove\" | \"circle-right\" | \"circle-up\" | \"circle-warning\" | \"clock-3\" | \"clock\" | \"cloud-download\" | \"cloud-upload\" | \"cog\" | \"coin\" | \"contacts\" | \"corner-resize\" | \"credit-card\" | \"diamond\" | \"direction-arrows\" | \"dollar-coin-shine\" | \"dot-filled\" | \"double-buildings\" | \"edit-template\" | \"envelope\" | \"expense\" | \"eye-circle\" | \"eye-invisible\" | \"eye\" | \"face-meh\" | \"face-sad\" | \"face-smiley\" | \"feedbacks\" | \"file-certified\" | \"file-clone\" | \"file-copy\" | \"file-csv\" | \"file-dispose\" | \"file-doc\" | \"file-excel\" | \"file-export\" | \"file-lock\" | \"file-pdf\" | \"file-powerpoint\" | \"file-search\" | \"file-secured\" | \"file-sheets\" | \"file-slide\" | \"file-verified\" | \"file-word\" | \"flask\" | \"folder-user\" | \"folder\" | \"format-bold\" | \"format-heading1\" | \"format-heading2\" | \"format-italic\" | \"format-list-bulleted\" | \"format-list-numbered\" | \"format-underlined\" | \"forward-arrow\" | \"funnel-filter\" | \"gauge\" | \"global-dollar\" | \"globe\" | \"graduation-cap\" | \"graph\" | \"happy-sun\" | \"health-bag\" | \"heart\" | \"home\" | \"import\" | \"incident-siren\" | \"instapay\" | \"loading-2\" | \"lock\" | \"looks-one\" | \"looks-two\" | \"mandatory\" | \"media-content\" | \"moneybag\" | \"moon\" | \"multiple-stars\" | \"multiple-users\" | \"node\" | \"open-folder\" | \"paperclip\" | \"payment-summary\" | \"pencil\" | \"phone\" | \"piggy-bank\" | \"pin\" | \"plane\" | \"play-circle\" | \"print\" | \"raising-hands\" | \"rectangle-mandatory\" | \"reply-arrow\" | \"reply\" | \"reschedule\" | \"rostering\" | \"save\" | \"schedule-send\" | \"schedule\" | \"search-person\" | \"send\" | \"speaker\" | \"star-award\" | \"star-badge\" | \"star-medal\" | \"star\" | \"steps-circle\" | \"stopwatch\" | \"suitcase\" | \"survey\" | \"swag\" | \"tag\" | \"teams\" | \"thumb-down\" | \"thumb-up\" | \"timesheet\" | \"touch-id\" | \"trash-bin\" | \"unlock\" | \"user\" | \"video-1\" | \"video-2\" | \"wrench\" | \"academic-hat-outlined\" | \"activate-outlined\" | \"add-person-outlined\" | \"add-section-outlined\" | \"add-time-outlined\" | \"add\" | \"adjustment-outlined\" | \"afternoon-outlined\" | \"alignment-2-outlined\" | \"alignment-outlined\" | \"all-caps\" | \"arrow-down\" | \"arrow-left\" | \"arrow-right\" | \"arrow-up\" | \"at-sign\" | \"bell-outlined\" | \"billing-outlined\" | \"billing-pound-outlined\" | \"body-outlined\" | \"bookmark-outlined\" | \"box-check-outlined\" | \"box-outlined\" | \"briefcase-clock-outlined\" | \"briefcase-search-outlined\" | \"bullet-points\" | \"cake-outlined\" | \"calendar-dates-outlined\" | \"calendar-star-outlined\" | \"camera-outlined\" | \"chat-outlined\" | \"checkmark\" | \"circle-add-outlined\" | \"circle-cancel-outlined\" | \"circle-down-outlined\" | \"circle-info-outlined\" | \"circle-left-outlined\" | \"circle-ok-outlined\" | \"circle-question-outlined\" | \"circle-remove-outlined\" | \"circle-right-outlined\" | \"circle-up-outlined\" | \"circle-warning-outlined\" | \"clipboard-check-outlined\" | \"clipboard-text-outlined\" | \"clock-2-outlined\" | \"clock-outlined\" | \"cog-outlined\" | \"coin-outlined\" | \"coin-pound-outlined\" | \"coin-stack-outlined\" | \"collapse-outlined\" | \"comment-outlined\" | \"contacts-outlined\" | \"content-copy-outlined\" | \"copy-outlined\" | \"credit-card-outlined\" | \"cup-outlined\" | \"cut-outlined\" | \"desktop-computer-outlined\" | \"diagram-outlined\" | \"diamond-outlined\" | \"direction-arrows-outlined\" | \"directory-outlined\" | \"document-outlined\" | \"dollar-coin-shine-outlined\" | \"dollar-sign\" | \"donut-chart-outlined\" | \"double-buildings-outlined\" | \"double-left-arrows\" | \"double-right-arrows\" | \"download-outlined\" | \"edit-template-outlined\" | \"edit-user-outlined\" | \"email-outlined\" | \"enter-arrow\" | \"envelope-outlined\" | \"evening-outlined\" | \"expand-outlined\" | \"expense-outlined\" | \"external-link\" | \"eye-invisible-outlined\" | \"eye-outlined\" | \"face-id\" | \"face-meh-outlined\" | \"face-open-smiley-outlined\" | \"face-sad-outlined\" | \"face-smiley-outlined\" | \"feed-outlined\" | \"feedbacks-outlined\" | \"file-certified-outlined\" | \"file-clone-outlined\" | \"file-copy-outlined\" | \"file-dispose-outlined\" | \"file-download-outlined\" | \"file-export-outlined\" | \"file-lock-outlined\" | \"file-outlined\" | \"file-search-outlined\" | \"file-secured-outlined\" | \"file-text-outlined\" | \"file-verified-outlined\" | \"filter-outlined\" | \"fire-outlined\" | \"flag-outlined\" | \"folder-outlined\" | \"folder-user-outlined\" | \"funnel-filter-outline\" | \"gauge-outlined\" | \"gift-outlined\" | \"graph-outlined\" | \"happy-sun-outlined\" | \"health-bag-outlined\" | \"heart-outlined\" | \"home-outlined\" | \"image-outlined\" | \"import-outlined\" | \"instapay-outlined\" | \"italic\" | \"link-1\" | \"link-2\" | \"list-outlined\" | \"location-outlined\" | \"lock-outlined\" | \"locked-file-outlined\" | \"log-out\" | \"magic-outlined\" | \"media-content-outlined\" | \"menu-close\" | \"menu-expand\" | \"menu-fold-outlined\" | \"menu-unfold-outlined\" | \"mobile-phone-1-outlined\" | \"moneybag-outlined\" | \"moneybag-pound-outlined\" | \"moon-outlined\" | \"more-horizontal\" | \"more-vertical\" | \"morning-outlined\" | \"multiple-folders-outlined\" | \"multiple-users-outlined\" | \"node-outlined\" | \"number-points\" | \"passport-outlined\" | \"payment-summary-outlined\" | \"payslip-outlined\" | \"pencil-outlined\" | \"percentage\" | \"phone-outlined\" | \"piggy-bank-outlined\" | \"pin-outlined\" | \"plane-outlined\" | \"play-circle-outlined\" | \"pound-sign\" | \"print-outlined\" | \"qr-code-outlined\" | \"re-assign\" | \"redeem\" | \"refresh\" | \"reply-outlined\" | \"return-arrow\" | \"ringgit-sign\" | \"rocket-outlined\" | \"rostering-outlined\" | \"save-outlined\" | \"schedule-outlined\" | \"search-outlined\" | \"send-outlined\" | \"share-1\" | \"share-2\" | \"shield-check-outlined\" | \"single-down-arrow\" | \"single-left-arrow\" | \"single-right-arrow\" | \"single-up-arrow\" | \"sparkle-2-outlined\" | \"sparkle-outlined\" | \"speaker-outlined\" | \"speed-outlined\" | \"star-outlined\" | \"stopwatch-outlined\" | \"strikethrough\" | \"suitcase-outlined\" | \"survey-outlined\" | \"switch-outlined\" | \"sync\" | \"tablet-outlined\" | \"target-outlined\" | \"thumb-up-outlined\" | \"timesheet-outlined\" | \"transfer\" | \"trash-bin-outlined\" | \"trash-outlined\" | \"unavailable\" | \"underline\" | \"unlinked\" | \"unlock-outlined\" | \"upload-outlined\" | \"user-add-outlined\" | \"user-circle-outlined\" | \"user-move-outlined\" | \"user-out-outlined\" | \"user-outlined\" | \"user-rectangle-outlined\" | \"user-remove-outlined\" | \"user-warning-outlined\" | \"video-1-outlined\" | \"video-2-outlined\" | \"wallet-outlined\" | \"wrench-outlined\" | ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Name of Icon or an Icon element to render on the right side of the input."
    },
    "sx": {
      "name": "sx",
      "type": "Partial<Record<SxKeys, SxValues>>",
      "required": false,
      "description": "[Theme-aware style property](/guidelines/sxProp)"
    },
    "value": {
      "name": "value",
      "type": "Array<V>",
      "required": false,
      "description": "Current selected value."
    },
    "variant": {
      "name": "variant",
      "type": "\"compact\" | \"basic\"",
      "required": false,
      "description": "How select should render selected items."
    }
  },
  "examples": [
    {
      "example_name": "Basic",
      "example_description": "Basic usage example.\n```jsx live\nfunction BasicSelect() {\n  const options = [\n    { value: 'item-1', text: 'Item 1' },\n    { value: 'item-2', text: 'Item 2' },\n    { value: 'item-3', text: 'Item 3' },\n    { value: 'item-4', text: 'Item 4', disabled: true },\n    { value: 'item-5', text: 'Item 5' },\n    { value: 'item-6', text: 'Item 6' },\n  ];\n  const [value, setValue] = useState('item-1');\n  return (\n    <Select\n      options={options}\n      value={value}\n      onChange={setValue}\n      placeholder=\"Select an item\"\n      data-test-id=\"basic\"\n    />\n  );\n}\n```",
      "code": "function BasicSelect() {\n  const options = [\n    { value: 'item-1', text: 'Item 1' },\n    { value: 'item-2', text: 'Item 2' },\n    { value: 'item-3', text: 'Item 3' },\n    { value: 'item-4', text: 'Item 4', disabled: true },\n    { value: 'item-5', text: 'Item 5' },\n    { value: 'item-6', text: 'Item 6' },\n  ];\n  const [value, setValue] = useState('item-1');\n  return (\n    <Select\n      options={options}\n      value={value}\n      onChange={setValue}\n      placeholder=\"Select an item\"\n      data-test-id=\"basic\"\n    />\n  );\n}",
      "purpose_description": "This example demonstrates the basic usage of a Select component in a React application. It shows how to render a dropdown menu with a list of options, allowing users to select an item from the list. The example includes handling state changes when a different option is selected.",
      "technical_description": "The BasicSelect component utilizes React's useState hook to manage the selected value of the dropdown. The options array defines the list of items that will be displayed in the Select component, each with a value and text property. One of the options is marked as disabled, which will prevent it from being selected. The Select component is rendered with props for options, value, onChange, placeholder, and data-test-id. The onChange prop is linked to the setValue function, which updates the component's state whenever a new option is selected.",
      "patterns_description": "This example demonstrates the use of controlled components in React, where the component's state is used to manage the value of the Select input. The useState hook is employed to handle the state management, ensuring that the component re-renders with the correct value whenever a change occurs. The pattern of passing a state updater function (setValue) to the onChange prop is a common practice in React to handle user interactions and update the component's state accordingly.",
      "use_cases_description": "This basic Select component example is useful in scenarios where a user needs to choose from a predefined list of options, such as selecting a category, filtering search results, or choosing a setting in a form. It is particularly beneficial in forms and settings pages where dropdown menus are a common UI element. The ability to disable specific options also adds flexibility for use cases where certain choices may not be applicable or available under certain conditions."
    },
    {
      "example_name": "Custom selected option renderer",
      "example_description": "Select allows to custom the selected option text via `selectedOptionRenderer` callback.\n```jsx live\nfunction CustomOption() {\n  const [value, setValue] = useState('vnd');\n  const options = [\n    { value: 'usd', text: 'USD - US Dollar' },\n    { value: 'eur', text: 'EUR - Euro' },\n    { value: 'aud', text: 'AUD - Australian Dollar' },\n    { value: 'vnd', text: 'VND - Vietnam Dong' },\n  ];\n  return (\n    <Select\n      options={options}\n      selectedOptionRenderer={({ option }) => option.text.substring(0, 3)}\n      value={value}\n      onChange={setValue}\n      placeholder=\"Select currency\"\n      data-test-id=\"customized-selected-option\"\n    />\n  );\n}\n```",
      "code": "function CustomOption() {\n  const [value, setValue] = useState('vnd');\n  const options = [\n    { value: 'usd', text: 'USD - US Dollar' },\n    { value: 'eur', text: 'EUR - Euro' },\n    { value: 'aud', text: 'AUD - Australian Dollar' },\n    { value: 'vnd', text: 'VND - Vietnam Dong' },\n  ];\n  return (\n    <Select\n      options={options}\n      selectedOptionRenderer={({ option }) => option.text.substring(0, 3)}\n      value={value}\n      onChange={setValue}\n      placeholder=\"Select currency\"\n      data-test-id=\"customized-selected-option\"\n    />\n  );\n}",
      "purpose_description": "The purpose of this example is to demonstrate how to customize the display text of the selected option in a Select component using the `selectedOptionRenderer` callback. This allows developers to control how the selected option is presented to the user, which can be useful for creating more concise or contextually appropriate displays.",
      "technical_description": "The example defines a functional component `CustomOption` that utilizes React's `useState` hook to manage the selected value of a currency. The component renders a `Select` component, which is configured with a list of currency options. The `selectedOptionRenderer` prop is a callback function that customizes the display of the selected option by truncating the option's text to the first three characters. This is achieved using JavaScript's `substring` method. The `value` prop is bound to the component's state, and the `onChange` prop updates the state when a new option is selected.",
      "patterns_description": "This example demonstrates the use of controlled components in React, where the component's state is used to manage the selected value. It also illustrates the use of callback functions to customize component behavior, specifically through the `selectedOptionRenderer` prop. The use of `useState` for state management is a common pattern in functional components.",
      "use_cases_description": "This example is particularly useful in scenarios where the default display of selected options in a dropdown is too verbose or needs to be customized for better user experience. It can be applied in applications where space is limited or where the context requires a specific format for displaying selected options, such as financial applications displaying currency codes."
    },
    {
      "example_name": "Sizes",
      "example_description": "There are three sizes of a Select box: `small`, `medium` and `large`. It is set to `medium` by default.\n```jsx live\nfunction SelectSizes() {\n  const options = [\n    { value: 'item-1', text: 'Item 1' },\n    { value: 'item-2', text: 'Item 2' },\n    { value: 'item-3', text: 'Item 3' },\n  ];\n  const [value, setValue] = useState();\n  return (\n    <>\n      <Select\n        options={options}\n        value={value}\n        onChange={setValue}\n        placeholder=\"Small\"\n        size=\"small\"\n        style={{ marginBottom: theme.space.medium }}\n      />\n      <Select\n        options={options}\n        value={value}\n        onChange={setValue}\n        placeholder=\"Medium\"\n        style={{ marginBottom: theme.space.medium }}\n      />\n      <Select\n        options={options}\n        value={value}\n        onChange={setValue}\n        placeholder=\"Large\"\n        size=\"large\"\n      />\n    </>\n  );\n}\n```",
      "code": "function SelectSizes() {\n  const options = [\n    { value: 'item-1', text: 'Item 1' },\n    { value: 'item-2', text: 'Item 2' },\n    { value: 'item-3', text: 'Item 3' },\n  ];\n  const [value, setValue] = useState();\n  return (\n    <>\n      <Select\n        options={options}\n        value={value}\n        onChange={setValue}\n        placeholder=\"Small\"\n        size=\"small\"\n        style={{ marginBottom: theme.space.medium }}\n      />\n      <Select\n        options={options}\n        value={value}\n        onChange={setValue}\n        placeholder=\"Medium\"\n        style={{ marginBottom: theme.space.medium }}\n      />\n      <Select\n        options={options}\n        value={value}\n        onChange={setValue}\n        placeholder=\"Large\"\n        size=\"large\"\n      />\n    </>\n  );\n}",
      "purpose_description": "This example demonstrates how to implement a Select component with different size options: small, medium, and large. The component allows users to choose from a list of predefined options, and it showcases how to apply different sizes to the Select component for better UI adaptability.",
      "technical_description": "The SelectSizes component utilizes React's useState hook to manage the selected value from the dropdown options. It defines an array of options, each with a value and text property. Three Select components are rendered, each with different size properties: 'small', 'medium', and 'large'. The size prop is used to adjust the visual size of the Select component. The onChange prop is set to update the state with the selected value, ensuring that the component is controlled. The style prop is used to add margin between the Select components for better visual separation.",
      "patterns_description": "This example demonstrates the controlled component pattern, where the Select component's value is controlled by React state. It also shows how to use the useState hook for state management and how to pass callback functions to handle state updates. The use of the size prop to adjust component styling is a common pattern for creating responsive and adaptable UI components.",
      "use_cases_description": "This example is particularly useful in scenarios where a UI requires dropdowns of varying sizes, such as in forms with different input field sizes or in responsive designs where component sizes need to adapt to different screen sizes. It is also applicable in applications that require a consistent and controlled way to manage user input through dropdown selections."
    },
    {
      "example_name": "Callback when scroll to bottom.",
      "example_description": "A callback can be called when user scroll to bottom of the option list. This is set through `onScrollListToBottom`.\n```jsx live\nfunction SelectCallback() {\n  const options = [\n    { value: 'item-1', text: 'Item 1' },\n    { value: 'item-2', text: 'Item 2' },\n    { value: 'item-3', text: 'Item 3' },\n    { value: 'item-4', text: 'Item 4' },\n    { value: 'item-5', text: 'Item 5' },\n    { value: 'item-6', text: 'Item 6' },\n    { value: 'item-7', text: 'Item 7' },\n    { value: 'item-8', text: 'Item 8' },\n    { value: 'item-9', text: 'Item 9' },\n    { value: 'item-10', text: 'Item 10' },\n  ];\n  const [value, setValue] = useState();\n  return (\n    <Select\n      options={options}\n      value={value}\n      onChange={setValue}\n      placeholder=\"Select an item\"\n      prefix=\"envelope\"\n      onScrollListToBottom={() => console.log('Now at bottom')}\n    />\n  );\n}\n```",
      "code": "function SelectCallback() {\n  const options = [\n    { value: 'item-1', text: 'Item 1' },\n    { value: 'item-2', text: 'Item 2' },\n    { value: 'item-3', text: 'Item 3' },\n    { value: 'item-4', text: 'Item 4' },\n    { value: 'item-5', text: 'Item 5' },\n    { value: 'item-6', text: 'Item 6' },\n    { value: 'item-7', text: 'Item 7' },\n    { value: 'item-8', text: 'Item 8' },\n    { value: 'item-9', text: 'Item 9' },\n    { value: 'item-10', text: 'Item 10' },\n  ];\n  const [value, setValue] = useState();\n  return (\n    <Select\n      options={options}\n      value={value}\n      onChange={setValue}\n      placeholder=\"Select an item\"\n      prefix=\"envelope\"\n      onScrollListToBottom={() => console.log('Now at bottom')}\n    />\n  );\n}",
      "purpose_description": "This example demonstrates how to use a callback function that triggers when the user scrolls to the bottom of a dropdown list in a Select component. The callback is specified using the `onScrollListToBottom` prop, which is useful for implementing features like infinite scrolling or lazy loading additional options.",
      "technical_description": "The component `SelectCallback` defines a list of options and uses the `useState` hook to manage the selected value. The `Select` component is rendered with several props: `options`, `value`, `onChange`, `placeholder`, `prefix`, and `onScrollListToBottom`. The `onScrollListToBottom` prop is a function that logs a message to the console when the user scrolls to the bottom of the options list. This is likely implemented internally in the `Select` component by attaching a scroll event listener to the dropdown list and checking if the scroll position is at the bottom.",
      "patterns_description": "This example demonstrates the use of controlled components in React, where the `Select` component's state is managed externally via the `useState` hook. It also shows how to handle events and callbacks in React, specifically using a custom event (`onScrollListToBottom`) to enhance user interaction. The use of a placeholder and prefix are common UI patterns to improve user experience.",
      "use_cases_description": "This pattern is particularly useful in scenarios where the list of options is large or dynamically loaded. For example, in a search dropdown that queries a server for results, the `onScrollListToBottom` callback can be used to fetch more results as the user scrolls, implementing an infinite scroll feature. This enhances performance and user experience by loading data on demand."
    },
    {
      "example_name": "Customise searching behaviour",
      "example_description": "The default searching is case-insensitive. Select allow customise searching behaviour by providing the `optionPredicate` prop.\n```jsx live\nfunction SelectWithCustomSearching() {\n  const options = [\n    { value: 'option-a', text: 'Option a' },\n    { value: 'option-A', text: 'Option A' },\n  ];\n  const [value, setValue] = useState();\n  const [query, setQuery] = useState();\n\n  const customOptionPredicate = (query) => (option) =>\n    option.text.includes(query || '');\n\n  return (\n    <Select\n      options={options}\n      value={value}\n      onChange={setValue}\n      placeholder=\"Search...\"\n      query={query}\n      onQueryChange={setQuery}\n      optionPredicate={customOptionPredicate}\n      id=\"searchable-select-input\"\n      noResults={\n        <Box p=\"small\">\n          <Typography.Text intent=\"subdued\" style={{ textAlign: 'center' }}>\n            No results\n          </Typography.Text>\n        </Box>\n      }\n    />\n  );\n}\n```",
      "code": "function SelectWithCustomSearching() {\n  const options = [\n    { value: 'option-a', text: 'Option a' },\n    { value: 'option-A', text: 'Option A' },\n  ];\n  const [value, setValue] = useState();\n  const [query, setQuery] = useState();\n\n  const customOptionPredicate = (query) => (option) =>\n    option.text.includes(query || '');\n\n  return (\n    <Select\n      options={options}\n      value={value}\n      onChange={setValue}\n      placeholder=\"Search...\"\n      query={query}\n      onQueryChange={setQuery}\n      optionPredicate={customOptionPredicate}\n      id=\"searchable-select-input\"\n      noResults={\n        <Box p=\"small\">\n          <Typography.Text intent=\"subdued\" style={{ textAlign: 'center' }}>\n            No results\n          </Typography.Text>\n        </Box>\n      }\n    />\n  );\n}",
      "purpose_description": "This example demonstrates how to customize the search behavior of a Select component by using the `optionPredicate` prop. The default search behavior is case-insensitive, but this example allows for a custom search function to be implemented, which can be tailored to specific needs, such as case-sensitive search or other custom filtering logic.",
      "technical_description": "The component defines a `SelectWithCustomSearching` function that utilizes React's `useState` hook to manage the state of the selected value and the search query. The `customOptionPredicate` function is defined to customize the search behavior. It takes the current query as an argument and returns a function that checks if the option's text includes the query string. This predicate function is passed to the `Select` component via the `optionPredicate` prop, allowing for custom search logic. The `Select` component is configured with various props, including `options`, `value`, `onChange`, `placeholder`, `query`, `onQueryChange`, `optionPredicate`, `id`, and `noResults`. The `noResults` prop is used to display a message when no options match the search query.",
      "patterns_description": "This example demonstrates the use of controlled components in React, where the component's state is managed via `useState` and updated through event handlers. The `optionPredicate` prop showcases a pattern for customizing component behavior by passing a function as a prop. This pattern is common in React for extending or modifying component functionality. Additionally, the use of a fallback UI with the `noResults` prop is a best practice for enhancing user experience by providing feedback when no search results are found.",
      "use_cases_description": "This example is useful in scenarios where the default search behavior of a Select component does not meet specific requirements, such as needing case-sensitive search or implementing complex filtering logic. It can be applied in applications where users need to search through a list of options with custom criteria, such as filtering product lists, searching through user directories, or any other context where tailored search functionality is required."
    },
    {
      "example_name": "Allow to clear selected option",
      "example_description": "Select allows to clear selected option by setting `clearable` prop.\n```jsx live\nfunction ClearSelect() {\n  const options = [\n    { value: 'item-1', text: 'Item 1' },\n    { value: 'item-2', text: 'Item 2' },\n    { value: 'item-3', text: 'Item 3' },\n  ];\n  const [value, setValue] = useState('item-1');\n  return (\n    <Select\n      options={options}\n      value={value}\n      onChange={setValue}\n      placeholder=\"Select an item\"\n      data-test-id=\"clearable\"\n      clearable\n    />\n  );\n}\n```",
      "code": "function ClearSelect() {\n  const options = [\n    { value: 'item-1', text: 'Item 1' },\n    { value: 'item-2', text: 'Item 2' },\n    { value: 'item-3', text: 'Item 3' },\n  ];\n  const [value, setValue] = useState('item-1');\n  return (\n    <Select\n      options={options}\n      value={value}\n      onChange={setValue}\n      placeholder=\"Select an item\"\n      data-test-id=\"clearable\"\n      clearable\n    />\n  );\n}",
      "purpose_description": "The purpose of this example is to demonstrate how a Select component can be configured to allow users to clear their current selection. This is achieved by setting a specific prop, `clearable`, which enables a feature that lets users remove their selection, reverting the Select component to its initial state or placeholder.",
      "technical_description": "The `ClearSelect` component is a functional React component that utilizes the `useState` hook to manage the state of the selected option. The component initializes with a default selected value of 'item-1'. The `Select` component is rendered with several props: `options`, `value`, `onChange`, `placeholder`, `data-test-id`, and `clearable`. The `options` prop is an array of objects, each representing a selectable item with `value` and `text` properties. The `value` prop is bound to the component's state, and the `onChange` prop is a callback function that updates the state when a new option is selected. The `clearable` prop is a boolean that, when true, allows the user to clear the selection, typically by providing a UI element like a clear button within the Select component.",
      "patterns_description": "This example demonstrates the use of controlled components in React, where the component's state is managed via React's `useState` hook. The `onChange` handler is a common pattern for updating state in response to user input. The use of a `clearable` prop is a pattern that enhances user experience by providing additional flexibility in user interactions. Additionally, the inclusion of a `data-test-id` prop is a best practice for making components more testable.",
      "use_cases_description": "This example is particularly useful in scenarios where users need the flexibility to deselect an option, such as in forms where optional fields are present. It is also applicable in user interfaces that require dynamic filtering or searching, where users might need to reset their selections frequently. This pattern is beneficial in applications with complex forms or settings pages, where user input needs to be easily modifiable."
    },
    {
      "example_name": "MultiSelect with custom option renderer",
      "example_description": "Select.Multi option can be customised via `optionRenderer` callback.\n```jsx live\nfunction MultiSelect() {\n  const [value, setValue] = useState([]);\n  const options = [\n    { value: 'item-1', text: 'Item 1', icon: 'add-person' },\n    { value: 'item-2', text: 'Item 2', icon: 'alignment' },\n    { value: 'item-3', text: 'Item 3', icon: 'bell' },\n    { value: 'item-4', text: 'Item 4', icon: 'billing' },\n    { value: 'item-5', text: 'Item 5', icon: 'bookmark' },\n  ];\n  const optionRenderer = React.useCallback(\n    ({ option: { text, icon }, index }) => (\n      <>\n        <Icon icon={icon} style={{ marginRight: theme.space.small }} />\n        <span style={{ margin: 0, padding: 0 }}>{`${index + 1}: ${text}`}</span>\n      </>\n    ),\n    []\n  );\n  return (\n    <Select.Multi\n      options={options}\n      optionRenderer={optionRenderer}\n      value={value}\n      onChange={setValue}\n      placeholder=\"Select an item\"\n      prefix=\"envelope\"\n      data-test-id=\"multiselect-customized-option\"\n    />\n  );\n}\n```",
      "code": "function MultiSelect() {\n  const [value, setValue] = useState([]);\n  const options = [\n    { value: 'item-1', text: 'Item 1', icon: 'add-person' },\n    { value: 'item-2', text: 'Item 2', icon: 'alignment' },\n    { value: 'item-3', text: 'Item 3', icon: 'bell' },\n    { value: 'item-4', text: 'Item 4', icon: 'billing' },\n    { value: 'item-5', text: 'Item 5', icon: 'bookmark' },\n  ];\n  const optionRenderer = React.useCallback(\n    ({ option: { text, icon }, index }) => (\n      <>\n        <Icon icon={icon} style={{ marginRight: theme.space.small }} />\n        <span style={{ margin: 0, padding: 0 }}>{`${index + 1}: ${text}`}</span>\n      </>\n    ),\n    []\n  );\n  return (\n    <Select.Multi\n      options={options}\n      optionRenderer={optionRenderer}\n      value={value}\n      onChange={setValue}\n      placeholder=\"Select an item\"\n      prefix=\"envelope\"\n      data-test-id=\"multiselect-customized-option\"\n    />\n  );\n}",
      "purpose_description": "The purpose of this example is to demonstrate how to implement a multi-select dropdown component in React with customized rendering for each option. This is achieved by using the `optionRenderer` callback to define a custom way to display each option in the dropdown list.",
      "technical_description": "The `MultiSelect` component is a functional React component that uses the `useState` hook to manage the selected values of the multi-select dropdown. The `options` array defines the available options, each with a `value`, `text`, and `icon`. The `optionRenderer` function is defined using `React.useCallback` to memoize the function, ensuring it does not get recreated on every render. This function takes an object with `option` and `index` properties and returns a JSX fragment that includes an `Icon` component and a `span` element displaying the option's text prefixed by its index. The `Select.Multi` component is rendered with several props, including `options`, `optionRenderer`, `value`, `onChange`, `placeholder`, `prefix`, and `data-test-id`. The `onChange` prop is set to `setValue`, allowing the component to update the selected values when the user makes a selection.",
      "patterns_description": "This example demonstrates several React patterns and best practices, including:\n- Using `useState` to manage component state, specifically for handling the selected values of the multi-select component.\n- Utilizing `React.useCallback` to memoize the `optionRenderer` function, which optimizes performance by preventing unnecessary re-creations of the function on re-renders.\n- Implementing a custom option rendering logic to enhance the user interface by displaying icons and indexed text for each option.\n- Passing props to configure the behavior and appearance of the `Select.Multi` component, showcasing the flexibility of component composition in React.",
      "use_cases_description": "This example is particularly useful in scenarios where a multi-select dropdown needs to display additional information or custom styling for each option, such as icons or indexed labels. It is applicable in applications where users need to select multiple items from a list, and the visual representation of each option enhances usability, such as in dashboards, settings pages, or forms requiring detailed selection inputs."
    },
    {
      "example_name": "MultiSelect with GroupedOption",
      "example_description": "```jsx live\nfunction MultiSelectGroup() {\n  const options = [\n    {\n      category: 'Teams',\n      options: [\n        { value: 'team-1', text: 'Team 1', helpText: '5 members' },\n        { value: 'team-2', text: 'Team 2', helpText: '3 members' },\n      ],\n    },\n    {\n      category: 'Locations',\n      options: [{ value: 'location-1', text: 'Location 1' }],\n    },\n    {\n      category: 'Individual',\n      options: [\n        { value: 'person-1', text: 'Person 1' },\n        { value: 'person-2', text: 'Person 2' },\n      ],\n    },\n  ];\n  const [value, setValue] = useState(['team-1']);\n  return (\n    <Select.Multi\n      options={options}\n      value={value}\n      onChange={setValue}\n      placeholder=\"Select an item\"\n      prefix=\"envelope\"\n      data-test-id=\"multiselect-grouped-options\"\n    />\n  );\n}\n```",
      "code": "function MultiSelectGroup() {\n  const options = [\n    {\n      category: 'Teams',\n      options: [\n        { value: 'team-1', text: 'Team 1', helpText: '5 members' },\n        { value: 'team-2', text: 'Team 2', helpText: '3 members' },\n      ],\n    },\n    {\n      category: 'Locations',\n      options: [{ value: 'location-1', text: 'Location 1' }],\n    },\n    {\n      category: 'Individual',\n      options: [\n        { value: 'person-1', text: 'Person 1' },\n        { value: 'person-2', text: 'Person 2' },\n      ],\n    },\n  ];\n  const [value, setValue] = useState(['team-1']);\n  return (\n    <Select.Multi\n      options={options}\n      value={value}\n      onChange={setValue}\n      placeholder=\"Select an item\"\n      prefix=\"envelope\"\n      data-test-id=\"multiselect-grouped-options\"\n    />\n  );\n}",
      "purpose_description": "The purpose of this example is to demonstrate how to implement a multi-select dropdown component in React that supports grouping of options. This allows users to select multiple items from categorized options, enhancing the user experience by organizing selections into logical groups.",
      "technical_description": "The component, `MultiSelectGroup`, utilizes React's state management through the `useState` hook to manage the selected values. The `options` array is structured to include categories, each containing an array of options. The `Select.Multi` component is used to render the multi-select dropdown, which takes the `options`, `value`, and `onChange` as props. The `options` prop is a nested array that includes categories and their respective options. The `value` prop holds the currently selected items, and `onChange` is a callback function that updates the state when the selection changes. Additional props like `placeholder`, `prefix`, and `data-test-id` are used for UI customization and testing purposes.",
      "patterns_description": "This example demonstrates the use of controlled components in React, where the component's state is managed via React's `useState` hook. It also shows how to handle complex data structures by organizing options into categories, which is a common pattern in UI design to improve usability. The use of a `Select.Multi` component suggests a reusable component pattern, promoting modularity and separation of concerns.",
      "use_cases_description": "This component is particularly useful in scenarios where users need to select multiple items from a large set of options that can be logically grouped. Examples include selecting team members from different departments, choosing locations from various regions, or picking individual items from categorized lists. It is suitable for applications that require enhanced user interaction and data organization, such as project management tools, e-commerce platforms, or any application with complex data filtering needs."
    },
    {
      "example_name": "MultiSelect with customised searching behaviour",
      "example_description": "```jsx live\nfunction SelectWithCustomSearching() {\n  const options = [\n    { value: 'option-a', text: 'Option a' },\n    { value: 'option-A', text: 'Option A' },\n  ];\n  const [value, setValue] = useState();\n  const [query, setQuery] = useState();\n\n  const customOptionPredicate = (query) => (option) =>\n    option.text.includes(query || '');\n\n  return (\n    <Select.Multi\n      options={options}\n      value={value}\n      onChange={setValue}\n      placeholder=\"Search...\"\n      query={query}\n      onQueryChange={setQuery}\n      optionPredicate={customOptionPredicate}\n      id=\"searchable-select-input\"\n      noResults={\n        <Box p=\"small\">\n          <Typography.Text intent=\"subdued\" style={{ textAlign: 'center' }}>\n            No results\n          </Typography.Text>\n        </Box>\n      }\n    />\n  );\n}\n```",
      "code": "function SelectWithCustomSearching() {\n  const options = [\n    { value: 'option-a', text: 'Option a' },\n    { value: 'option-A', text: 'Option A' },\n  ];\n  const [value, setValue] = useState();\n  const [query, setQuery] = useState();\n\n  const customOptionPredicate = (query) => (option) =>\n    option.text.includes(query || '');\n\n  return (\n    <Select.Multi\n      options={options}\n      value={value}\n      onChange={setValue}\n      placeholder=\"Search...\"\n      query={query}\n      onQueryChange={setQuery}\n      optionPredicate={customOptionPredicate}\n      id=\"searchable-select-input\"\n      noResults={\n        <Box p=\"small\">\n          <Typography.Text intent=\"subdued\" style={{ textAlign: 'center' }}>\n            No results\n          </Typography.Text>\n        </Box>\n      }\n    />\n  );\n}",
      "purpose_description": "This example demonstrates a multi-select component with a customized search functionality. The primary purpose is to allow users to filter options based on a search query, with the ability to handle case sensitivity or other custom search logic through a predicate function.",
      "technical_description": "The component utilizes React's useState hook to manage the state of the selected value and the search query. The 'Select.Multi' component is configured with a set of options and a custom predicate function for filtering these options based on the user's input. The predicate function checks if the option's text includes the current query string. The component also handles changes in the query and selected value through the 'onQueryChange' and 'onChange' handlers, respectively. If no options match the query, a 'noResults' message is displayed using a Box and Typography component for styling.",
      "patterns_description": "This example demonstrates the use of controlled components in React, where the component's state is managed through React hooks and passed down as props. The use of a custom predicate function for option filtering showcases a flexible approach to implementing search logic, allowing for customization beyond simple string matching. The component also exemplifies the separation of concerns by handling UI rendering and logic separately, making it easier to maintain and extend.",
      "use_cases_description": "This component is particularly useful in scenarios where users need to select multiple items from a large list, and a simple search functionality is required to filter options. It can be used in applications like e-commerce platforms for filtering products, admin dashboards for managing user roles or permissions, or any interface where multi-select input with search capability is beneficial. The customizable search logic makes it adaptable to various use cases, such as case-insensitive searches or more complex filtering criteria."
    },
    {
      "example_name": "MultiSelect with compact mode",
      "example_description": "Using `Select.Multi` with `compact` variant allows to render only 1 selected tag to save some space. This requires a custom `selectedOptionRenderer` to get the label representing selected items.\n```jsx live\nfunction MultiSelect() {\n  const options = [\n    { value: 'item-1', text: 'Item 1' },\n    { value: 'item-2', text: 'Item 2' },\n    { value: 'item-3', text: 'Item 3' },\n    { value: 'item-4', text: 'Item 4' },\n    { value: 'item-5', text: 'Item 5' },\n  ];\n  const [value, setValue] = useState(['item-1', 'item-2']);\n  return (\n    <Select.Multi\n      options={options}\n      value={value}\n      onChange={setValue}\n      placeholder=\"Select an item\"\n      data-test-id=\"compact-multiselect\"\n      variant=\"compact\"\n      selectedOptionRenderer={() => 'Some item selected'}\n    />\n  );\n}\n```",
      "code": "function MultiSelect() {\n  const options = [\n    { value: 'item-1', text: 'Item 1' },\n    { value: 'item-2', text: 'Item 2' },\n    { value: 'item-3', text: 'Item 3' },\n    { value: 'item-4', text: 'Item 4' },\n    { value: 'item-5', text: 'Item 5' },\n  ];\n  const [value, setValue] = useState(['item-1', 'item-2']);\n  return (\n    <Select.Multi\n      options={options}\n      value={value}\n      onChange={setValue}\n      placeholder=\"Select an item\"\n      data-test-id=\"compact-multiselect\"\n      variant=\"compact\"\n      selectedOptionRenderer={() => 'Some item selected'}\n    />\n  );\n}",
      "purpose_description": "The purpose of this example is to demonstrate how to use the `Select.Multi` component in a compact mode, which is useful for saving space in the UI by displaying only one selected tag. This is particularly helpful in scenarios where multiple selections are possible, but the UI space is limited.",
      "technical_description": "The `MultiSelect` component uses the `Select.Multi` component from a UI library to allow users to select multiple options from a dropdown. The component maintains its state using the `useState` hook, which holds the currently selected values. The `options` array defines the available choices, each with a `value` and `text` property. The `Select.Multi` component is configured with several props: `options` to provide the list of selectable items, `value` to bind the selected items, `onChange` to update the state when selections change, and `placeholder` for the input field. The `variant` prop is set to `compact` to enable the compact mode, and `selectedOptionRenderer` is a custom function that returns a string ('Some item selected') to represent the selected items in a compact form.",
      "patterns_description": "This example demonstrates the use of controlled components in React, where the component's state is managed via the `useState` hook and updated through the `onChange` handler. It also showcases the use of custom rendering logic via the `selectedOptionRenderer` prop, which is a common pattern for customizing the display of selected items in dropdowns. The use of a `variant` prop to switch between different display modes is a pattern often used in component libraries to provide flexible UI configurations.",
      "use_cases_description": "This example is particularly useful in applications where space is limited, such as in mobile interfaces or dashboards with dense information. It allows users to select multiple items without cluttering the UI with multiple tags. The compact mode is ideal for scenarios where the exact list of selected items is less important than the fact that some items have been selected, such as in filters or settings panels."
    }
  ]
}