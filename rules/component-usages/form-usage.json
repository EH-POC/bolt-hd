{
  "component_name": "Form",
  "component_description": "The `Form` component is used to add validations to input components including `Input`, `Input.TextArea` and `DatePicker`.",
  "props": {},
  "examples": [
    {
      "example_name": "Form.Field with Input",
      "example_description": "`Form.Field` helps to control validate status of its inputs.\n```jsx live\n<>\n  <Form.Field style={{ marginBottom: theme.space.small }}>\n    <Input placeholder=\"no validate status\" suffix=\"pencil\" />\n  </Form.Field>\n  <Form.Field\n    validateStatus=\"success\"\n    style={{ marginBottom: theme.space.small }}\n  >\n    <Input placeholder=\"success\" />\n  </Form.Field>\n  <Form.Field\n    validateStatus=\"error\"\n    style={{ marginBottom: theme.space.small }}\n  >\n    <Input placeholder=\"error\" />\n  </Form.Field>\n  <Form.Field\n    validateStatus=\"warning\"\n    style={{ marginBottom: theme.space.small }}\n  >\n    <Input placeholder=\"warning\" />\n  </Form.Field>\n  <Form.Field validateStatus=\"validating\">\n    <Input placeholder=\"validating\" />\n  </Form.Field>\n</>\n```",
      "code": "<>\n  <Form.Field style={{ marginBottom: theme.space.small }}>\n    <Input placeholder=\"no validate status\" suffix=\"pencil\" />\n  </Form.Field>\n  <Form.Field\n    validateStatus=\"success\"\n    style={{ marginBottom: theme.space.small }}\n  >\n    <Input placeholder=\"success\" />\n  </Form.Field>\n  <Form.Field\n    validateStatus=\"error\"\n    style={{ marginBottom: theme.space.small }}\n  >\n    <Input placeholder=\"error\" />\n  </Form.Field>\n  <Form.Field\n    validateStatus=\"warning\"\n    style={{ marginBottom: theme.space.small }}\n  >\n    <Input placeholder=\"warning\" />\n  </Form.Field>\n  <Form.Field validateStatus=\"validating\">\n    <Input placeholder=\"validating\" />\n  </Form.Field>\n</>",
      "purpose_description": "The purpose of this example is to demonstrate how the `Form.Field` component can be used to manage and display different validation statuses for input fields within a form. It shows how to visually indicate the validation state of each input field using different statuses such as success, error, warning, and validating.",
      "technical_description": "The example consists of multiple `Form.Field` components, each wrapping an `Input` component. The `Form.Field` component is used to encapsulate the input fields and manage their validation status. Each `Form.Field` is styled with a margin at the bottom using inline styles, which utilize a `theme.space.small` value for consistent spacing. The `validateStatus` prop is used to specify the validation state of the input, which can be one of 'success', 'error', 'warning', or 'validating'. This prop likely affects the visual styling of the input field to reflect its validation status. The `Input` component is used to render the actual input field, with placeholders indicating the current validation status. The first `Form.Field` does not have a `validateStatus` prop, demonstrating a default or neutral state.",
      "patterns_description": "This example demonstrates the use of controlled components in React, where the validation status of each input is managed through props. It also showcases the use of inline styles for consistent spacing, leveraging a theme object for design consistency. The example follows a pattern of using wrapper components (`Form.Field`) to manage state and styling for child components (`Input`). This pattern is common in React for separating concerns and enhancing reusability and maintainability of components.",
      "use_cases_description": "This example is particularly useful in scenarios where form validation feedback is required, such as in user registration forms, login forms, or any data entry forms where immediate feedback on input validity is beneficial. It can be used in applications that require clear and immediate user feedback on form inputs, enhancing user experience by visually indicating the status of each input field."
    },
    {
      "example_name": "Form.Field with DatePicker",
      "example_description": "```jsx live\nfunction FormWithDatePicker() {\n  const [value, setValue] = React.useState();\n  return (\n    <>\n      <Form.Field style={{ marginBottom: theme.space.small }}>\n        <DatePicker\n          value={value}\n          onChange={(newVal) => setValue(newVal)}\n          placeholder=\"no validate status\"\n        />\n      </Form.Field>\n      <Form.Field\n        validateStatus=\"success\"\n        style={{ marginBottom: theme.space.small }}\n      >\n        <DatePicker\n          value={value}\n          onChange={(newVal) => setValue(newVal)}\n          placeholder=\"success\"\n        />\n      </Form.Field>\n      <Form.Field\n        validateStatus=\"error\"\n        style={{ marginBottom: theme.space.small }}\n      >\n        <DatePicker\n          value={value}\n          onChange={(newVal) => setValue(newVal)}\n          placeholder=\"error\"\n        />\n      </Form.Field>\n      <Form.Field\n        validateStatus=\"warning\"\n        style={{ marginBottom: theme.space.small }}\n      >\n        <DatePicker\n          value={value}\n          onChange={(newVal) => setValue(newVal)}\n          placeholder=\"warning\"\n        />\n      </Form.Field>\n      <Form.Field\n        validateStatus=\"validating\"\n        style={{ marginBottom: theme.space.small }}\n      >\n        <DatePicker\n          value={value}\n          onChange={(newVal) => setValue(newVal)}\n          placeholder=\"validating\"\n        />\n      </Form.Field>\n    </>\n  );\n}\n```",
      "code": "function FormWithDatePicker() {\n  const [value, setValue] = React.useState();\n  return (\n    <>\n      <Form.Field style={{ marginBottom: theme.space.small }}>\n        <DatePicker\n          value={value}\n          onChange={(newVal) => setValue(newVal)}\n          placeholder=\"no validate status\"\n        />\n      </Form.Field>\n      <Form.Field\n        validateStatus=\"success\"\n        style={{ marginBottom: theme.space.small }}\n      >\n        <DatePicker\n          value={value}\n          onChange={(newVal) => setValue(newVal)}\n          placeholder=\"success\"\n        />\n      </Form.Field>\n      <Form.Field\n        validateStatus=\"error\"\n        style={{ marginBottom: theme.space.small }}\n      >\n        <DatePicker\n          value={value}\n          onChange={(newVal) => setValue(newVal)}\n          placeholder=\"error\"\n        />\n      </Form.Field>\n      <Form.Field\n        validateStatus=\"warning\"\n        style={{ marginBottom: theme.space.small }}\n      >\n        <DatePicker\n          value={value}\n          onChange={(newVal) => setValue(newVal)}\n          placeholder=\"warning\"\n        />\n      </Form.Field>\n      <Form.Field\n        validateStatus=\"validating\"\n        style={{ marginBottom: theme.space.small }}\n      >\n        <DatePicker\n          value={value}\n          onChange={(newVal) => setValue(newVal)}\n          placeholder=\"validating\"\n        />\n      </Form.Field>\n    </>\n  );\n}",
      "purpose_description": "This example demonstrates how to integrate a DatePicker component within a Form.Field component in a React application. It showcases different validation states that a form field can have, such as success, error, warning, and validating, providing a visual indication of the field's status to the user.",
      "technical_description": "The component uses React's useState hook to manage the state of the selected date. The FormWithDatePicker function component renders multiple Form.Field components, each containing a DatePicker. The DatePicker's value is controlled by the component's state, and its onChange event updates this state. Each Form.Field is styled with a margin and can have a validateStatus prop that changes its appearance based on the validation state. The validateStatus prop is used to visually indicate the field's validation status, which can be 'success', 'error', 'warning', or 'validating'.",
      "patterns_description": "This example demonstrates controlled components in React, where the DatePicker's value is controlled by the component's state. It also shows how to use inline styles for layout purposes and how to implement visual feedback for form validation using the validateStatus prop. The use of React's useState hook for state management is a common pattern for handling form inputs.",
      "use_cases_description": "This example is particularly useful in scenarios where a form requires date input with validation feedback. It can be used in applications that need to collect date information from users, such as booking systems, event schedulers, or any form that requires date validation. The visual feedback provided by the validateStatus prop can enhance user experience by clearly indicating the status of the input field."
    }
  ]
}