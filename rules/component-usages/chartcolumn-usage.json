{
  "component_name": "Chart.Column",
  "component_description": "Chart that displayes multiple columns and stacked the bars to help visualize the data.\n```jsx live\nfunction ColumnChart() {\n  const [currentIndex, setCurrentIndex] = React.useState(0);\n  const labels = [\n    'May 2023',\n    'Jun 2023',\n    'Jul 2023',\n    'Aug 2023',\n    'Sep 2023',\n    'Jun 2024',\n    'Jul 2024',\n  ];\n  const data = [\n    { label: '07th', data: [2.2, 1, 2, 2.5, 4, 3, 4] },\n    { label: '14th', data: [1, 3, 1.5, 0.5, 2, 2, 3] },\n    { label: '21st', data: [2, 2, 1.6, 1.5, 1, 1, 2] },\n    { label: '25th', data: [3, 5, 2.3, 3, 3, 3, 1] },\n    { label: '31st', data: [2, 1, 3, 2, 1.5, 0.6, 1] },\n  ];\n  const numberOfColumns = 5;\n\n  return (\n    <Box sx={{ height: 400 }}>\n      <Chart.Column\n        data={data.map((d) => ({\n          ...d,\n          data: d.data.slice(currentIndex, currentIndex + numberOfColumns),\n        }))}\n        xAxisConfig={{\n          title: 'Horizontal Title',\n          labels: labels.slice(currentIndex, currentIndex + numberOfColumns),\n        }}\n        yAxisConfig={{\n          title: 'Vertical Title',\n          maxValue: 13,\n          tick: {\n            interval: 1,\n          },\n        }}\n        legendConfig={{\n          selectable: true,\n          viewMoreText: 'More',\n          maxLegend: 4,\n        }}\n        navigationConfig={{\n          visible: true,\n          onNavigate: (direction) => {\n            if (direction === 'next') {\n              if (currentIndex + numberOfColumns >= labels.length) return;\n              setCurrentIndex(currentIndex + 1);\n            }\n            if (direction === 'prev') {\n              if (currentIndex === 0) return;\n              setCurrentIndex(currentIndex - 1);\n            }\n          },\n        }}\n      />\n    </Box>\n  );\n}\n```",
  "props": {
    "barConfig": {
      "name": "barConfig",
      "type": "BarConfig<DataValue>",
      "required": false,
      "description": "Bar section config."
    },
    "className": {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "A space-delimited list of class names to pass along to the element."
    },
    "data": {
      "name": "data",
      "type": "Array<Series<Array<DataValue>>>",
      "required": true,
      "description": "Data of the chart."
    },
    "data-test-id": {
      "name": "data-test-id",
      "type": "string",
      "required": false,
      "description": "Testing id of the element."
    },
    "highlightedItems": {
      "name": "highlightedItems",
      "type": "Array<{ label: string; legend: string }>",
      "required": false,
      "description": "Matched pattern to highlight the bars."
    },
    "id": {
      "name": "id",
      "type": "string",
      "required": false,
      "description": "Id of the element."
    },
    "legendConfig": {
      "name": "legendConfig",
      "type": "intersection",
      "required": false,
      "description": "Legend config."
    },
    "navigationConfig": {
      "name": "navigationConfig",
      "type": "NavigationConfig",
      "required": false,
      "description": "Navigation button config."
    },
    "style": {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "Additional inline style to be applied for the most outer element of the component."
    },
    "styleConfig": {
      "name": "styleConfig",
      "type": "StyleConfig",
      "required": false,
      "description": "styleConfig use to custom the style of the chart.\n* styleConfig must be an object:\n   * color?: use to custom the legend colors."
    },
    "sx": {
      "name": "sx",
      "type": "Partial<Record<SxKeys, SxValues>>",
      "required": false,
      "description": "[Theme-aware style property](/guidelines/sxProp)"
    },
    "tooltipRenderer": {
      "name": "tooltipRenderer",
      "type": "(props: { label?: string; legendColor?: string; value?: DataValue; yAxisLabel?: string }) => ReactNode",
      "required": false,
      "description": "Tooltip renderer."
    },
    "xAxisConfig": {
      "name": "xAxisConfig",
      "type": "intersection",
      "required": false,
      "description": "X axis config."
    },
    "yAxisConfig": {
      "name": "yAxisConfig",
      "type": "Omit<YAxisConfig, \"maxValue\">",
      "required": false,
      "description": "Y axis config."
    }
  },
  "examples": [
    {
      "example_name": "Basic",
      "example_description": "The basic chart contains no legend, title and filter.\n```jsx live\nfunction ColumnChart() {\n  const labels = [\n    'May 2023',\n    'Jun 2023',\n    'Jul 2023',\n    'Aug 2023',\n    'Sep 2023',\n    'Jun 2024',\n    'Jul 2024',\n  ];\n  const data = [\n    { label: '07th', data: [2.2, 1, 2, 2.5, 4, 3, 4] },\n    { label: '14th', data: [1, 3, 1.5, 0.5, 2, 2, 3] },\n    { label: '21st', data: [2, 2, 1.6, 1.5, 1, 1, 2] },\n    { label: '25th', data: [3, 5, 2.3, 3, 3, 3, 1] },\n    { label: '31st', data: [2, 1, 3, 2, 1.5, 0.6, 1] },\n  ];\n\n  return (\n    <Box sx={{ height: 400 }}>\n      <Chart.Column\n        data={data}\n        xAxisConfig={{\n          labels,\n        }}\n        yAxisConfig={{\n          maxValue: 13,\n          tick: {\n            interval: 1,\n          },\n        }}\n        data-test-id=\"basic-column-chart\"\n      />\n    </Box>\n  );\n}\n```",
      "code": "function ColumnChart() {\n  const labels = [\n    'May 2023',\n    'Jun 2023',\n    'Jul 2023',\n    'Aug 2023',\n    'Sep 2023',\n    'Jun 2024',\n    'Jul 2024',\n  ];\n  const data = [\n    { label: '07th', data: [2.2, 1, 2, 2.5, 4, 3, 4] },\n    { label: '14th', data: [1, 3, 1.5, 0.5, 2, 2, 3] },\n    { label: '21st', data: [2, 2, 1.6, 1.5, 1, 1, 2] },\n    { label: '25th', data: [3, 5, 2.3, 3, 3, 3, 1] },\n    { label: '31st', data: [2, 1, 3, 2, 1.5, 0.6, 1] },\n  ];\n\n  return (\n    <Box sx={{ height: 400 }}>\n      <Chart.Column\n        data={data}\n        xAxisConfig={{\n          labels,\n        }}\n        yAxisConfig={{\n          maxValue: 13,\n          tick: {\n            interval: 1,\n          },\n        }}\n        data-test-id=\"basic-column-chart\"\n      />\n    </Box>\n  );\n}",
      "purpose_description": "This example demonstrates a basic implementation of a column chart using a React component. The chart is designed to display data over a series of months, without additional features such as legends, titles, or filters. It serves as a foundational example for understanding how to render a column chart with minimal configuration.",
      "technical_description": "The `ColumnChart` function is a React functional component that renders a column chart using the `Chart.Column` component. It defines two arrays: `labels`, which contains the labels for the x-axis representing months, and `data`, which is an array of objects where each object represents a data series with a label and corresponding data points. The component returns a `Box` component with a fixed height of 400 pixels, containing the `Chart.Column` component. The `Chart.Column` component is configured with the `data` array, `xAxisConfig` for setting the x-axis labels, and `yAxisConfig` for defining the maximum value and tick interval on the y-axis. The `data-test-id` attribute is used for testing purposes.",
      "patterns_description": "This example demonstrates the use of functional components in React, leveraging hooks for state management and rendering. It uses the `Box` component from a UI library (likely Material-UI) to manage layout and styling. The component also illustrates how to pass configuration objects to child components to customize their behavior, a common pattern in React for managing component configurations. Additionally, the use of `data-test-id` is a best practice for enabling easy testing of components.",
      "use_cases_description": "This basic column chart example is particularly useful in scenarios where developers need to quickly visualize data trends over time without additional chart features. It can be used in dashboards, reports, or any application requiring simple data visualization. The example serves as a starting point for more complex chart implementations, allowing developers to add features like legends, titles, or interactive elements as needed. It is also useful for educational purposes, helping new developers understand the basics of rendering charts in React."
    },
    {
      "example_name": "With bar sizing",
      "example_description": "The column chart can change the bar width by barConfig.size. We have two values is `medium` or `large`.\nThe default value is `large`.\n```jsx live\nfunction ColumnChart() {\n  const labels = [\n    'May 2023',\n    'Jun 2023',\n    'Jul 2023',\n    'Aug 2023',\n    'Sep 2023',\n    'Jun 2024',\n    'Jul 2024',\n  ];\n  const data = [\n    { label: '07th', data: [2.2, 1, 2, 2.5, 4, 3, 4] },\n    { label: '14th', data: [1, 3, 1.5, 0.5, 2, 2, 3] },\n    { label: '21st', data: [2, 2, 1.6, 1.5, 1, 1, 2] },\n    { label: '25th', data: [3, 5, 2.3, 3, 3, 3, 1] },\n    { label: '31st', data: [2, 1, 3, 2, 1.5, 0.6, 1] },\n  ];\n\n  return (\n    <Box sx={{ height: 400 }}>\n      <Chart.Column\n        data={data}\n        xAxisConfig={{ title: 'Horizontal Title', labels }}\n        yAxisConfig={{\n          title: 'Vertical Title',\n          maxValue: 13,\n          tick: {\n            interval: 1,\n          },\n        }}\n        barConfig={{\n          size: 'medium',\n        }}\n      />\n    </Box>\n  );\n}\n```",
      "code": "function ColumnChart() {\n  const labels = [\n    'May 2023',\n    'Jun 2023',\n    'Jul 2023',\n    'Aug 2023',\n    'Sep 2023',\n    'Jun 2024',\n    'Jul 2024',\n  ];\n  const data = [\n    { label: '07th', data: [2.2, 1, 2, 2.5, 4, 3, 4] },\n    { label: '14th', data: [1, 3, 1.5, 0.5, 2, 2, 3] },\n    { label: '21st', data: [2, 2, 1.6, 1.5, 1, 1, 2] },\n    { label: '25th', data: [3, 5, 2.3, 3, 3, 3, 1] },\n    { label: '31st', data: [2, 1, 3, 2, 1.5, 0.6, 1] },\n  ];\n\n  return (\n    <Box sx={{ height: 400 }}>\n      <Chart.Column\n        data={data}\n        xAxisConfig={{ title: 'Horizontal Title', labels }}\n        yAxisConfig={{\n          title: 'Vertical Title',\n          maxValue: 13,\n          tick: {\n            interval: 1,\n          },\n        }}\n        barConfig={{\n          size: 'medium',\n        }}\n      />\n    </Box>\n  );\n}",
      "purpose_description": "This example demonstrates how to create a column chart using the Chart.Column component, with a focus on configuring the bar size. The example shows how to adjust the bar width using the barConfig.size property, which can be set to either 'medium' or 'large'. The default bar size is 'large', but this example explicitly sets it to 'medium'.",
      "technical_description": "The ColumnChart component is a functional React component that renders a column chart using the Chart.Column component. It defines two arrays: 'labels' for the x-axis labels and 'data' for the dataset. Each data object contains a 'label' and a corresponding 'data' array representing the values for each label. The component returns a Box component with a fixed height of 400 pixels, which contains the Chart.Column component. The Chart.Column component is configured with several props: 'data' for the dataset, 'xAxisConfig' for the x-axis configuration, 'yAxisConfig' for the y-axis configuration, and 'barConfig' for the bar size configuration. The xAxisConfig includes a title and labels, while the yAxisConfig includes a title, a maximum value, and tick interval settings. The barConfig specifies the bar size as 'medium'.",
      "patterns_description": "This example demonstrates several React and charting best practices:\n1. Separation of Concerns: The data and configuration are defined outside the JSX return statement, making the component easier to read and maintain.\n2. Use of Functional Components: The component is implemented as a functional component, which is a modern React pattern that supports hooks and is generally more concise than class components.\n3. Configuration Objects: The use of configuration objects for the x-axis, y-axis, and bar settings promotes clarity and reusability, allowing for easy adjustments to the chart's appearance and behavior.",
      "use_cases_description": "This example is particularly useful in scenarios where a developer needs to display time-series data or categorical data in a column chart format. It is suitable for dashboards, reports, or any application that requires visual representation of data trends over time. The ability to adjust bar sizes makes it adaptable for different visual requirements, such as emphasizing certain data points or fitting the chart within a specific layout. This flexibility is beneficial in responsive design contexts where the chart needs to adapt to various screen sizes."
    },
    {
      "example_name": "With navigation",
      "example_description": "The column chart also supports navigation between the data. Use `navigationConfig.visible` and `navigationConfig.onNavigate` props to handle the navigation.\n```jsx live\nfunction ColumnChart() {\n  const [currentIndex, setCurrentIndex] = React.useState(0);\n  const numberOfColumns = 5;\n\n  const labels = [\n    'May 2023',\n    'Jun 2023',\n    'Jul 2023',\n    'Aug 2023',\n    'Sep 2023',\n    'Jun 2024',\n    'Jul 2024',\n  ];\n  const data = [\n    { label: '07th', data: [2.2, 1, 2, 2.5, 4, 3, 4] },\n    { label: '14th', data: [1, 3, 1.5, 0.5, 2, 2, 3] },\n    { label: '21st', data: [2, 2, 1.6, 1.5, 1, 1, 2] },\n    { label: '25th', data: [3, 5, 2.3, 3, 3, 3, 1] },\n    { label: '31st', data: [2, 1, 3, 2, 1.5, 0.6, 1] },\n  ];\n\n  const navigationMapping = {\n    0: 'prev',\n    [`${labels.length - numberOfColumns}`]: 'next',\n  };\n\n  return (\n    <Box sx={{ height: 400 }}>\n      <Chart.Column\n        data={data.map((d) => ({\n          ...d,\n          data: d.data.slice(currentIndex, currentIndex + numberOfColumns),\n        }))}\n        xAxisConfig={{\n          labels: labels.slice(currentIndex, currentIndex + numberOfColumns),\n        }}\n        yAxisConfig={{\n          maxValue: 13,\n          tick: {\n            interval: 1,\n          },\n        }}\n        navigationConfig={{\n          visible: true,\n          onNavigate: (direction) => {\n            if (direction === 'next') {\n              if (currentIndex + numberOfColumns >= labels.length) return;\n              setCurrentIndex(currentIndex + 1);\n            }\n            if (direction === 'prev') {\n              if (currentIndex === 0) return;\n              setCurrentIndex(currentIndex - 1);\n            }\n          },\n          disabledButtons: navigationMapping[currentIndex],\n        }}\n      />\n    </Box>\n  );\n}\n```",
      "code": "function ColumnChart() {\n  const [currentIndex, setCurrentIndex] = React.useState(0);\n  const numberOfColumns = 5;\n\n  const labels = [\n    'May 2023',\n    'Jun 2023',\n    'Jul 2023',\n    'Aug 2023',\n    'Sep 2023',\n    'Jun 2024',\n    'Jul 2024',\n  ];\n  const data = [\n    { label: '07th', data: [2.2, 1, 2, 2.5, 4, 3, 4] },\n    { label: '14th', data: [1, 3, 1.5, 0.5, 2, 2, 3] },\n    { label: '21st', data: [2, 2, 1.6, 1.5, 1, 1, 2] },\n    { label: '25th', data: [3, 5, 2.3, 3, 3, 3, 1] },\n    { label: '31st', data: [2, 1, 3, 2, 1.5, 0.6, 1] },\n  ];\n\n  const navigationMapping = {\n    0: 'prev',\n    [`${labels.length - numberOfColumns}`]: 'next',\n  };\n\n  return (\n    <Box sx={{ height: 400 }}>\n      <Chart.Column\n        data={data.map((d) => ({\n          ...d,\n          data: d.data.slice(currentIndex, currentIndex + numberOfColumns),\n        }))}\n        xAxisConfig={{\n          labels: labels.slice(currentIndex, currentIndex + numberOfColumns),\n        }}\n        yAxisConfig={{\n          maxValue: 13,\n          tick: {\n            interval: 1,\n          },\n        }}\n        navigationConfig={{\n          visible: true,\n          onNavigate: (direction) => {\n            if (direction === 'next') {\n              if (currentIndex + numberOfColumns >= labels.length) return;\n              setCurrentIndex(currentIndex + 1);\n            }\n            if (direction === 'prev') {\n              if (currentIndex === 0) return;\n              setCurrentIndex(currentIndex - 1);\n            }\n          },\n          disabledButtons: navigationMapping[currentIndex],\n        }}\n      />\n    </Box>\n  );\n}",
      "purpose_description": "This example demonstrates how to implement a column chart with navigation capabilities using the `Chart.Column` component. The primary purpose is to allow users to navigate through a dataset that is too large to display all at once, by showing a subset of the data and providing navigation controls to move through the data sequentially.",
      "technical_description": "The component maintains a `currentIndex` state to track the starting point of the data slice currently being displayed. The `numberOfColumns` constant defines how many data points are visible at any given time. The `data` array contains objects with labels and corresponding data arrays, representing different data series. The `labels` array contains the x-axis labels for the chart. The `navigationMapping` object is used to determine which navigation buttons should be disabled based on the current index. The `Chart.Column` component is configured with sliced data and labels according to the `currentIndex` and `numberOfColumns`. The `navigationConfig` prop is used to handle navigation, with the `onNavigate` function updating the `currentIndex` based on the navigation direction, ensuring it stays within bounds. The `disabledButtons` property is set using the `navigationMapping` to disable navigation buttons appropriately.",
      "patterns_description": "This example demonstrates the use of state management with `useState` to handle dynamic data slicing and navigation. It uses functional programming techniques to map and slice arrays, ensuring only relevant data is displayed. The component also employs conditional logic to manage navigation boundaries, preventing out-of-bounds errors. The use of a configuration object (`navigationConfig`) to manage navigation behavior is a pattern that promotes clean and maintainable code.",
      "use_cases_description": "This example is particularly useful in scenarios where a dataset is too large to display all at once, such as financial data over multiple years, sales data across various regions, or any time-series data that benefits from being viewed in smaller, more manageable segments. It allows users to focus on specific parts of the data while still having the ability to navigate through the entire dataset."
    },
    {
      "example_name": "With bar config",
      "example_description": "Some additonal behaviours can be added to the bars via `barConfig`,e.g. `onClick` of the bar or show the total value with `showTotal`.\n```jsx live\nfunction ColumnChart() {\n  const [currentIndex, setCurrentIndex] = React.useState(0);\n  const labels = [\n    'May 2023',\n    'Jun 2023',\n    'Jul 2023',\n    'Aug 2023',\n    'Sep 2023',\n    'Jun 2024',\n    'Jul 2024',\n  ];\n  const data = [\n    { label: '07th', data: [2.2, 1, 2, 2.5, 4, 3, 4] },\n    { label: '14th', data: [1, 3, 1.5, 0.5, 2, 2, 3] },\n    { label: '21st', data: [2, 2, 1.6, 1.5, 1, 1, 2] },\n    { label: '25th', data: [3, 5, 2.3, 3, 3, 3, 1] },\n    { label: '31st', data: [2, 1, 3, 2, 1.5, 0.6, 1] },\n  ];\n  const numberOfColumns = 5;\n\n  return (\n    <Box sx={{ height: 400 }}>\n      <Chart.Column\n        data={data.map((d) => ({\n          ...d,\n          data: d.data.slice(currentIndex, currentIndex + numberOfColumns),\n        }))}\n        xAxisConfig={{\n          title: 'Horizontal Title',\n          labels: labels.slice(currentIndex, currentIndex + numberOfColumns),\n        }}\n        yAxisConfig={{\n          title: 'Vertical Title',\n          maxValue: 13,\n          tick: {\n            interval: 1,\n          },\n        }}\n        legendConfig={{\n          selectable: false,\n          viewMoreText: 'More',\n          maxLegend: 4,\n        }}\n        navigationConfig={{\n          visible: true,\n          onNavigate: (direction) => {\n            if (direction === 'next') {\n              if (currentIndex + numberOfColumns >= labels.length) return;\n              setCurrentIndex(currentIndex + 1);\n            }\n            if (direction === 'prev') {\n              if (currentIndex === 0) return;\n              setCurrentIndex(currentIndex - 1);\n            }\n          },\n        }}\n        barConfig={{\n          onClick: (e, item) => {\n            console.log(item);\n          },\n          showTotal: true,\n          totalFormatter: (totalValue) => totalValue.toFixed(1) + 'M',\n        }}\n      />\n    </Box>\n  );\n}\n```",
      "code": "function ColumnChart() {\n  const [currentIndex, setCurrentIndex] = React.useState(0);\n  const labels = [\n    'May 2023',\n    'Jun 2023',\n    'Jul 2023',\n    'Aug 2023',\n    'Sep 2023',\n    'Jun 2024',\n    'Jul 2024',\n  ];\n  const data = [\n    { label: '07th', data: [2.2, 1, 2, 2.5, 4, 3, 4] },\n    { label: '14th', data: [1, 3, 1.5, 0.5, 2, 2, 3] },\n    { label: '21st', data: [2, 2, 1.6, 1.5, 1, 1, 2] },\n    { label: '25th', data: [3, 5, 2.3, 3, 3, 3, 1] },\n    { label: '31st', data: [2, 1, 3, 2, 1.5, 0.6, 1] },\n  ];\n  const numberOfColumns = 5;\n\n  return (\n    <Box sx={{ height: 400 }}>\n      <Chart.Column\n        data={data.map((d) => ({\n          ...d,\n          data: d.data.slice(currentIndex, currentIndex + numberOfColumns),\n        }))}\n        xAxisConfig={{\n          title: 'Horizontal Title',\n          labels: labels.slice(currentIndex, currentIndex + numberOfColumns),\n        }}\n        yAxisConfig={{\n          title: 'Vertical Title',\n          maxValue: 13,\n          tick: {\n            interval: 1,\n          },\n        }}\n        legendConfig={{\n          selectable: false,\n          viewMoreText: 'More',\n          maxLegend: 4,\n        }}\n        navigationConfig={{\n          visible: true,\n          onNavigate: (direction) => {\n            if (direction === 'next') {\n              if (currentIndex + numberOfColumns >= labels.length) return;\n              setCurrentIndex(currentIndex + 1);\n            }\n            if (direction === 'prev') {\n              if (currentIndex === 0) return;\n              setCurrentIndex(currentIndex - 1);\n            }\n          },\n        }}\n        barConfig={{\n          onClick: (e, item) => {\n            console.log(item);\n          },\n          showTotal: true,\n          totalFormatter: (totalValue) => totalValue.toFixed(1) + 'M',\n        }}\n      />\n    </Box>\n  );\n}",
      "purpose_description": "This example demonstrates how to create a column chart using the Chart.Column component with additional configurations for interactivity and display enhancements. It showcases how to use the barConfig prop to add behaviors such as click events and displaying total values on the bars.",
      "technical_description": "The ColumnChart component uses React's useState hook to manage the current index of the data being displayed. It defines a set of labels and data points, which are sliced based on the current index to show a subset of the data in the chart. The Chart.Column component is configured with various props to customize the x-axis, y-axis, legend, navigation, and bar behavior. The xAxisConfig and yAxisConfig props define the titles and labels for the axes, while the legendConfig controls the legend's appearance. The navigationConfig enables navigation through the data by updating the current index. The barConfig prop is used to add an onClick event handler for the bars and to display the total value on each bar using a custom formatter.",
      "patterns_description": "This example demonstrates several React and charting best practices, including:\n- Using React's useState hook to manage component state, allowing for dynamic updates to the chart based on user interaction.\n- Slicing data arrays to efficiently manage and display only the relevant subset of data, improving performance and readability.\n- Implementing navigation controls to allow users to browse through data, enhancing user experience.\n- Utilizing event handlers to add interactivity to chart elements, such as logging data on bar clicks.\n- Customizing chart elements with configuration props, demonstrating flexibility and adaptability in chart design.",
      "use_cases_description": "This example is particularly useful in scenarios where data visualization is required, such as in dashboards or reporting tools. It allows users to interact with the data through navigation and click events, making it suitable for applications that require detailed data analysis or exploration. The ability to display total values on bars can be beneficial in financial or sales reports where understanding cumulative data is important. The component's configurability makes it adaptable to various datasets and presentation needs."
    },
    {
      "example_name": "With bar custom color",
      "example_description": "The chart support style for the bar color by passing colors attribute into the styleConfig prop.\n```jsx live\nfunction ColumnChart() {\n  const labels = [\n    'May 2023',\n    'Jun 2023',\n    'Jul 2023',\n    'Aug 2023',\n    'Sep 2023',\n    'Jun 2024',\n    'Jul 2024',\n  ];\n  const data = [\n    { label: '07th', data: [2.2, 1, 2, 2.5, 4, 3, 4] },\n    { label: '14th', data: [1, 3, 1.5, 0.5, 2, 2, 3] },\n    { label: '21st', data: [2, 2, 1.6, 1.5, 1, 1, 2] },\n    { label: '25th', data: [3, 5, 2.3, 3, 3, 3, 1] },\n    { label: '31st', data: [2, 1, 3, 2, 1.5, 0.6, 1] },\n  ];\n\n  return (\n    <Box>\n      <Chart.Column\n        style={{ height: 400 }}\n        data={data}\n        xAxisConfig={{\n          labels,\n        }}\n        yAxisConfig={{\n          maxValue: 13,\n          tick: {\n            interval: 1,\n          },\n        }}\n        legendConfig={{\n          selectable: false,\n          viewMoreText: 'More',\n          maxLegend: 4,\n        }}\n        styleConfig={{\n          series: [\n            {\n              label: '07th',\n              color: 'dodgerBlueLight30',\n            },\n            {\n              label: '14th',\n              color: 'violetLight30',\n            },\n            {\n              label: '21st',\n              color: 'greenLight30',\n            },\n            {\n              label: '25th',\n              color: 'orangeLight30',\n            },\n            {\n              label: '31st',\n              color: 'purpleLight30',\n            },\n          ],\n        }}\n      />\n    </Box>\n  );\n}\n```",
      "code": "function ColumnChart() {\n  const labels = [\n    'May 2023',\n    'Jun 2023',\n    'Jul 2023',\n    'Aug 2023',\n    'Sep 2023',\n    'Jun 2024',\n    'Jul 2024',\n  ];\n  const data = [\n    { label: '07th', data: [2.2, 1, 2, 2.5, 4, 3, 4] },\n    { label: '14th', data: [1, 3, 1.5, 0.5, 2, 2, 3] },\n    { label: '21st', data: [2, 2, 1.6, 1.5, 1, 1, 2] },\n    { label: '25th', data: [3, 5, 2.3, 3, 3, 3, 1] },\n    { label: '31st', data: [2, 1, 3, 2, 1.5, 0.6, 1] },\n  ];\n\n  return (\n    <Box>\n      <Chart.Column\n        style={{ height: 400 }}\n        data={data}\n        xAxisConfig={{\n          labels,\n        }}\n        yAxisConfig={{\n          maxValue: 13,\n          tick: {\n            interval: 1,\n          },\n        }}\n        legendConfig={{\n          selectable: false,\n          viewMoreText: 'More',\n          maxLegend: 4,\n        }}\n        styleConfig={{\n          series: [\n            {\n              label: '07th',\n              color: 'dodgerBlueLight30',\n            },\n            {\n              label: '14th',\n              color: 'violetLight30',\n            },\n            {\n              label: '21st',\n              color: 'greenLight30',\n            },\n            {\n              label: '25th',\n              color: 'orangeLight30',\n            },\n            {\n              label: '31st',\n              color: 'purpleLight30',\n            },\n          ],\n        }}\n      />\n    </Box>\n  );\n}",
      "purpose_description": "The purpose of this example is to demonstrate how to customize the color of bars in a column chart using the Chart.Column component. By passing a styleConfig prop, users can specify custom colors for each data series, enhancing the visual distinction between different data sets in the chart.",
      "technical_description": "This example defines a React functional component named ColumnChart. Inside this component, two arrays, labels and data, are defined to represent the x-axis labels and the data points for each series, respectively. The Chart.Column component is used to render a column chart. It receives several props: style, data, xAxisConfig, yAxisConfig, legendConfig, and styleConfig. The style prop sets the height of the chart. The data prop provides the data for the chart, with each object in the array representing a series. The xAxisConfig and yAxisConfig props configure the x and y axes, respectively. The legendConfig prop customizes the chart's legend, and the styleConfig prop is used to apply custom colors to each series in the chart.",
      "patterns_description": "This example demonstrates the use of configuration objects to customize chart components, a common pattern in React for managing complex component configurations. It also shows how to use props to pass data and configuration settings to child components, promoting reusability and separation of concerns. The use of descriptive variable names and structured data arrays enhances code readability and maintainability.",
      "use_cases_description": "This example is particularly useful in scenarios where a clear visual distinction between different data series is required, such as in business dashboards, data analysis tools, or any application that involves data visualization. Customizing bar colors can help users quickly identify and differentiate between various data sets, improving the overall user experience and data comprehension."
    }
  ]
}