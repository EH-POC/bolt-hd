{
  "component_name": "Chart.Bar",
  "component_description": "Reusable Bar chart components.",
  "props": {
    "barConfig": {
      "name": "barConfig",
      "type": "BarConfig<DataValue>",
      "required": false,
      "description": "Bar section config."
    },
    "className": {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "A space-delimited list of class names to pass along to the element."
    },
    "data": {
      "name": "data",
      "type": "Array<Series<Array<DataValue>>>",
      "required": true,
      "description": "Data of the chart."
    },
    "data-test-id": {
      "name": "data-test-id",
      "type": "string",
      "required": false,
      "description": "Testing id of the element."
    },
    "highlightedItems": {
      "name": "highlightedItems",
      "type": "Array<{ label: string; legend: string }>",
      "required": false,
      "description": "Matched pattern to highlight the bars."
    },
    "id": {
      "name": "id",
      "type": "string",
      "required": false,
      "description": "Id of the element."
    },
    "legendConfig": {
      "name": "legendConfig",
      "type": "intersection",
      "required": false,
      "description": "Legend config."
    },
    "navigationConfig": {
      "name": "navigationConfig",
      "type": "NavigationConfig",
      "required": false,
      "description": "Navigation button config."
    },
    "style": {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "Additional inline style to be applied for the most outer element of the component."
    },
    "styleConfig": {
      "name": "styleConfig",
      "type": "StyleConfig",
      "required": false,
      "description": "styleConfig use to custom the style of the chart.\n* styleConfig must be an object:\n   * color?: use to custom the legend colors."
    },
    "sx": {
      "name": "sx",
      "type": "Partial<Record<SxKeys, SxValues>>",
      "required": false,
      "description": "[Theme-aware style property](/guidelines/sxProp)"
    },
    "tooltipRenderer": {
      "name": "tooltipRenderer",
      "type": "(props: { label?: string; legendColor?: string; value?: DataValue; yAxisLabel?: string }) => ReactNode",
      "required": false,
      "description": "Tooltip renderer."
    },
    "xAxisConfig": {
      "name": "xAxisConfig",
      "type": "intersection",
      "required": false,
      "description": "X axis config."
    },
    "yAxisConfig": {
      "name": "yAxisConfig",
      "type": "Omit<YAxisConfig, \"maxValue\">",
      "required": false,
      "description": "Y axis config."
    }
  },
  "examples": [
    {
      "example_name": "Basic",
      "example_description": "The basic chart just contain the chart with no legend, title and filter.\n```jsx live\nfunction BarChart() {\n  const labels = ['May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Dec'];\n  const data = [\n    { label: '07th', data: [3, 4, 2, 2.5, 4, 3, 6] },\n    { label: '14th', data: [3, 4, 2, 2.5, 5, 3, 3] },\n    { label: '21st', data: [3, 4, 2, 2.5, 2, 3, 6] },\n    { label: '25th', data: [3, 4, 2, 2.5, 6, 3, 4] },\n    { label: '31st', data: [3, 4, 2, 2.5, 7, 3, 6] },\n  ];\n\n  return (\n    <Box sx={{ height: 400 }}>\n      <Chart.Bar\n        data={data}\n        xAxisConfig={{\n          title: 'Horizontal Title',\n        }}\n        yAxisConfig={{\n          title: 'Vertical Title',\n          labels,\n        }}\n        data-test-id=\"bar-chart\"\n      />\n    </Box>\n  );\n}\n```",
      "code": "function BarChart() {\n  const labels = ['May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Dec'];\n  const data = [\n    { label: '07th', data: [3, 4, 2, 2.5, 4, 3, 6] },\n    { label: '14th', data: [3, 4, 2, 2.5, 5, 3, 3] },\n    { label: '21st', data: [3, 4, 2, 2.5, 2, 3, 6] },\n    { label: '25th', data: [3, 4, 2, 2.5, 6, 3, 4] },\n    { label: '31st', data: [3, 4, 2, 2.5, 7, 3, 6] },\n  ];\n\n  return (\n    <Box sx={{ height: 400 }}>\n      <Chart.Bar\n        data={data}\n        xAxisConfig={{\n          title: 'Horizontal Title',\n        }}\n        yAxisConfig={{\n          title: 'Vertical Title',\n          labels,\n        }}\n        data-test-id=\"bar-chart\"\n      />\n    </Box>\n  );\n}",
      "purpose_description": "This example demonstrates a basic implementation of a bar chart using the Chart.Bar component. It is designed to display a simple bar chart without additional features such as legends, titles, or filters, focusing on the core functionality of rendering data in a bar chart format.",
      "technical_description": "The BarChart component is a functional React component that renders a bar chart using the Chart.Bar component. It defines two constants: 'labels' and 'data'. 'labels' is an array of strings representing the labels for the x-axis, while 'data' is an array of objects, each containing a 'label' and a 'data' array representing the y-values for each bar group. The component returns a JSX structure where a Box component is used to set the height of the chart area. Inside the Box, the Chart.Bar component is rendered with props for 'data', 'xAxisConfig', and 'yAxisConfig'. The 'xAxisConfig' and 'yAxisConfig' are objects that configure the titles and labels for the respective axes. The 'data-test-id' prop is used for testing purposes, allowing the chart to be easily identified in test suites.",
      "patterns_description": "This example demonstrates the use of functional components in React, which are a modern and preferred way to define components. It also shows how to use props to configure a component, a fundamental React pattern. The use of a Box component to manage layout and styling is a common practice in React applications, especially when using UI libraries that provide such components. Additionally, the inclusion of a 'data-test-id' prop is a best practice for making components testable.",
      "use_cases_description": "This basic bar chart example is particularly useful in scenarios where a simple visualization of data is needed without additional complexity. It can be used in dashboards, reports, or any application where data needs to be presented in a straightforward manner. The simplicity of the example makes it a good starting point for developers who want to understand how to integrate charting libraries into their React applications. It can also be extended to include more features like legends, tooltips, or interactive elements as needed."
    },
    {
      "example_name": "With step",
      "example_description": "the `xAxisConfig.step` props is used to set the step between the xAxis values.\n```jsx live\nfunction BarChart() {\n  const labels = ['May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Dec'];\n  const data = [\n    { label: '07th', data: [3, 4, 2, 2.5, 4, 3, 6] },\n    { label: '14th', data: [3, 4, 2, 2.5, 5, 3, 3] },\n    { label: '21st', data: [3, 4, 2, 2.5, 2, 3, 6] },\n    { label: '25th', data: [3, 4, 2, 2.5, 6, 3, 4] },\n    { label: '31st', data: [3, 4, 2, 2.5, 7, 3, 6] },\n  ];\n\n  return (\n    <Box sx={{ height: 400 }}>\n      <Chart.Bar\n        data={data}\n        xAxisConfig={{\n          title: 'Horizontal Title',\n          maxValue: 27,\n          tick: {\n            interval: 4,\n          },\n          step: 6,\n        }}\n        yAxisConfig={{\n          title: 'Vertical Title',\n          labels,\n        }}\n      />\n    </Box>\n  );\n}\n```",
      "code": "function BarChart() {\n  const labels = ['May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Dec'];\n  const data = [\n    { label: '07th', data: [3, 4, 2, 2.5, 4, 3, 6] },\n    { label: '14th', data: [3, 4, 2, 2.5, 5, 3, 3] },\n    { label: '21st', data: [3, 4, 2, 2.5, 2, 3, 6] },\n    { label: '25th', data: [3, 4, 2, 2.5, 6, 3, 4] },\n    { label: '31st', data: [3, 4, 2, 2.5, 7, 3, 6] },\n  ];\n\n  return (\n    <Box sx={{ height: 400 }}>\n      <Chart.Bar\n        data={data}\n        xAxisConfig={{\n          title: 'Horizontal Title',\n          maxValue: 27,\n          tick: {\n            interval: 4,\n          },\n          step: 6,\n        }}\n        yAxisConfig={{\n          title: 'Vertical Title',\n          labels,\n        }}\n      />\n    </Box>\n  );\n}",
      "purpose_description": "This example demonstrates how to use the `Chart.Bar` component to render a bar chart with a specific configuration for the x-axis, particularly focusing on the use of the `step` property to control the spacing between x-axis values. The component is designed to visualize data over a series of months, with multiple data series representing different dates within each month.",
      "technical_description": "The `BarChart` component is a functional React component that returns a JSX structure. It uses the `Chart.Bar` component to render a bar chart. The `data` array contains objects representing different series of data, each with a `label` and a corresponding `data` array. The `xAxisConfig` and `yAxisConfig` objects are used to configure the x and y axes of the chart, respectively. The `xAxisConfig` includes properties such as `title`, `maxValue`, `tick.interval`, and `step`, which are used to define the appearance and behavior of the x-axis. The `step` property specifically sets the step between x-axis values, allowing for control over how data points are spaced along the axis. The `Box` component from a UI library is used to set the height of the chart container.",
      "patterns_description": "This example demonstrates the use of configuration objects to customize chart components, a common pattern in React for managing complex component configurations. The use of descriptive prop names and structured data arrays enhances readability and maintainability. The component also illustrates the use of functional components and JSX to define UI elements in a declarative manner.",
      "use_cases_description": "This example is particularly useful in scenarios where a developer needs to display time-series data across multiple categories, such as monthly sales figures or weekly performance metrics. The ability to customize the x-axis with specific steps and intervals makes it ideal for applications that require precise control over data visualization, such as dashboards or reporting tools."
    },
    {
      "example_name": "With legend",
      "example_description": "The bar chart is attached the legend to help visualize the data.\nWe have `legendConfig.selectable` props to make the legend become checkbox to filter the data.\n```jsx live\nfunction BarChart() {\n  const labels = ['May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Dec'];\n  const data = [\n    { label: '07th', data: [3, 4, 2, 2.5, 4, 3, 6] },\n    { label: '14th', data: [3, 4, 2, 2.5, 5, 3, 3] },\n    { label: '21st', data: [3, 4, 2, 2.5, 2, 3, 6] },\n    { label: '25th', data: [3, 4, 2, 2.5, 6, 3, 4] },\n    { label: '31st', data: [3, 4, 2, 2.5, 7, 3, 6] },\n  ];\n\n  return (\n    <Box>\n      <Typography.Title\n        level={4}\n        style={{ marginTop: `${theme.space.large}px` }}\n      >\n        Circles Legend\n      </Typography.Title>\n\n      <Chart.Bar\n        data={data}\n        xAxisConfig={{\n          maxValue: 25,\n          tick: {\n            interval: 5,\n          },\n          step: 5,\n        }}\n        yAxisConfig={{\n          labels,\n        }}\n        legendConfig={{\n          selectable: false,\n          viewMoreText: 'More',\n          maxLegend: 4,\n        }}\n        style={{ height: 400 }}\n      />\n      <Typography.Title\n        level={4}\n        style={{ marginTop: `${theme.space.large}px` }}\n      >\n        Checkboxes Legend\n      </Typography.Title>\n\n      <Chart.Bar\n        data={data}\n        xAxisConfig={{\n          maxValue: 25,\n          tick: {\n            interval: 5,\n          },\n          step: 5,\n        }}\n        yAxisConfig={{\n          labels,\n        }}\n        legendConfig={{\n          selectable: true,\n          viewMoreText: 'More',\n          maxLegend: 4,\n        }}\n        style={{ height: 400 }}\n      />\n    </Box>\n  );\n}\n```",
      "code": "function BarChart() {\n  const labels = ['May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Dec'];\n  const data = [\n    { label: '07th', data: [3, 4, 2, 2.5, 4, 3, 6] },\n    { label: '14th', data: [3, 4, 2, 2.5, 5, 3, 3] },\n    { label: '21st', data: [3, 4, 2, 2.5, 2, 3, 6] },\n    { label: '25th', data: [3, 4, 2, 2.5, 6, 3, 4] },\n    { label: '31st', data: [3, 4, 2, 2.5, 7, 3, 6] },\n  ];\n\n  return (\n    <Box>\n      <Typography.Title\n        level={4}\n        style={{ marginTop: `${theme.space.large}px` }}\n      >\n        Circles Legend\n      </Typography.Title>\n\n      <Chart.Bar\n        data={data}\n        xAxisConfig={{\n          maxValue: 25,\n          tick: {\n            interval: 5,\n          },\n          step: 5,\n        }}\n        yAxisConfig={{\n          labels,\n        }}\n        legendConfig={{\n          selectable: false,\n          viewMoreText: 'More',\n          maxLegend: 4,\n        }}\n        style={{ height: 400 }}\n      />\n      <Typography.Title\n        level={4}\n        style={{ marginTop: `${theme.space.large}px` }}\n      >\n        Checkboxes Legend\n      </Typography.Title>\n\n      <Chart.Bar\n        data={data}\n        xAxisConfig={{\n          maxValue: 25,\n          tick: {\n            interval: 5,\n          },\n          step: 5,\n        }}\n        yAxisConfig={{\n          labels,\n        }}\n        legendConfig={{\n          selectable: true,\n          viewMoreText: 'More',\n          maxLegend: 4,\n        }}\n        style={{ height: 400 }}\n      />\n    </Box>\n  );\n}",
      "purpose_description": "This example demonstrates how to use the Chart.Bar component to render bar charts with legends. It showcases two different configurations of legends: one with simple circles and another with checkboxes that allow users to filter the data displayed in the chart. The component is designed to help users visualize data trends over a series of months, with the ability to interact with the chart through the legend.",
      "technical_description": "The BarChart component utilizes the Chart.Bar component to render two bar charts, each with different legend configurations. The component defines a set of labels representing months and a data array containing datasets for different dates. Each dataset includes a label and an array of data points corresponding to the months. The component renders two instances of Chart.Bar, each configured with xAxisConfig and yAxisConfig to define the chart's axes. The xAxisConfig specifies a maximum value and tick interval, while the yAxisConfig assigns the labels to the y-axis. The legendConfig prop is used to configure the legend's behavior and appearance, with options for making the legend selectable and limiting the number of visible legend items. The style prop sets the height of the chart.",
      "patterns_description": "This example demonstrates the use of configuration objects to manage component behavior, a common pattern in React to enhance readability and maintainability. It also showcases the use of conditional rendering to provide different user interactions (e.g., selectable legends) based on prop values. The component uses descriptive prop names and structures to clearly convey the purpose of each configuration, aligning with best practices for self-documenting code.",
      "use_cases_description": "This example is particularly useful in scenarios where data visualization is required, such as dashboards or reports. It allows users to interact with the data through the legend, making it suitable for applications where users need to filter or explore data subsets. The ability to toggle legend items as checkboxes can be beneficial in scenarios where users need to compare specific datasets or focus on particular data trends over time."
    },
    {
      "example_name": "With bar config",
      "example_description": "We can custom the bar display or behavior throught `barConfig` props. Like, `onClick` of the bar or show the total value by `showTotal` props\n```jsx live\nfunction BarChart() {\n  const [currentIndex, setCurrentIndex] = React.useState(0);\n  const numberOfColumns = 6;\n  const data = [\n    { label: '07th', data: [3, 4, 2, 2.5, 4, 3, 6] },\n    { label: '14th', data: [3, 4, 2, 2.5, 5, 3, 3] },\n    { label: '21st', data: [3, 4, 2, 2.5, 2, 3, 6] },\n    { label: '25th', data: [3, 4, 2, 2.5, 6, 3, 4] },\n    { label: '31st', data: [3, 4, 2, 2.5, 7, 3, 6] },\n  ];\n\n  const labels = ['May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Dec'];\n\n  return (\n    <Box sx={{ height: 400 }}>\n      <Chart.Bar\n        data={data.map((d) => ({\n          ...d,\n          data: d.data.slice(currentIndex, currentIndex + numberOfColumns),\n        }))}\n        xAxisConfig={{\n          maxValue: 35,\n          tick: {\n            interval: 5,\n          },\n          step: 5,\n        }}\n        yAxisConfig={{\n          labels: labels.slice(currentIndex, currentIndex + numberOfColumns),\n        }}\n        legendConfig={{\n          selectable: true,\n          viewMoreText: 'More',\n          maxLegend: 4,\n        }}\n        navigationConfig={{\n          visible: true,\n          onNavigate: (direction) => {\n            if (direction === 'next') {\n              if (currentIndex + numberOfColumns >= labels.length) return;\n              setCurrentIndex(currentIndex + 1);\n            }\n            if (direction === 'prev') {\n              if (currentIndex === 0) return;\n              setCurrentIndex(currentIndex - 1);\n            }\n          },\n        }}\n        barConfig={{\n          onClick: (e, item) => {\n            console.log(item);\n          },\n          showTotal: true,\n          totalFormatter: (totalValue) => totalValue.toFixed(1) + 'M',\n        }}\n      />\n    </Box>\n  );\n}\n```",
      "code": "function BarChart() {\n  const [currentIndex, setCurrentIndex] = React.useState(0);\n  const numberOfColumns = 6;\n  const data = [\n    { label: '07th', data: [3, 4, 2, 2.5, 4, 3, 6] },\n    { label: '14th', data: [3, 4, 2, 2.5, 5, 3, 3] },\n    { label: '21st', data: [3, 4, 2, 2.5, 2, 3, 6] },\n    { label: '25th', data: [3, 4, 2, 2.5, 6, 3, 4] },\n    { label: '31st', data: [3, 4, 2, 2.5, 7, 3, 6] },\n  ];\n\n  const labels = ['May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Dec'];\n\n  return (\n    <Box sx={{ height: 400 }}>\n      <Chart.Bar\n        data={data.map((d) => ({\n          ...d,\n          data: d.data.slice(currentIndex, currentIndex + numberOfColumns),\n        }))}\n        xAxisConfig={{\n          maxValue: 35,\n          tick: {\n            interval: 5,\n          },\n          step: 5,\n        }}\n        yAxisConfig={{\n          labels: labels.slice(currentIndex, currentIndex + numberOfColumns),\n        }}\n        legendConfig={{\n          selectable: true,\n          viewMoreText: 'More',\n          maxLegend: 4,\n        }}\n        navigationConfig={{\n          visible: true,\n          onNavigate: (direction) => {\n            if (direction === 'next') {\n              if (currentIndex + numberOfColumns >= labels.length) return;\n              setCurrentIndex(currentIndex + 1);\n            }\n            if (direction === 'prev') {\n              if (currentIndex === 0) return;\n              setCurrentIndex(currentIndex - 1);\n            }\n          },\n        }}\n        barConfig={{\n          onClick: (e, item) => {\n            console.log(item);\n          },\n          showTotal: true,\n          totalFormatter: (totalValue) => totalValue.toFixed(1) + 'M',\n        }}\n      />\n    </Box>\n  );\n}",
      "purpose_description": "The purpose of this example is to demonstrate how to customize a bar chart using the `Chart.Bar` component with specific configurations for bar behavior and display. It showcases how to use the `barConfig` prop to handle events like clicks on bars and display total values in a formatted manner. Additionally, it illustrates navigation through data using a stateful approach to manage the current index of displayed data.",
      "technical_description": "The `BarChart` component uses React's state management to control which subset of data is displayed in the chart. It initializes a state variable `currentIndex` to track the starting index of the data slice being displayed. The `data` array contains objects with labels and data points, which are sliced according to `currentIndex` and `numberOfColumns` to dynamically update the chart's view. The `Chart.Bar` component is configured with several props: `xAxisConfig` and `yAxisConfig` for axis settings, `legendConfig` for legend customization, `navigationConfig` for handling navigation between data slices, and `barConfig` for bar-specific settings like click events and total value display. The `onNavigate` function updates the `currentIndex` based on navigation direction, ensuring it stays within bounds. The `barConfig` includes an `onClick` handler that logs the clicked item and a `showTotal` option with a custom `totalFormatter`.",
      "patterns_description": "This example demonstrates several React patterns and best practices, including:\n- **State Management**: Using `useState` to manage the current index of displayed data, allowing for dynamic updates to the chart.\n- **Data Slicing**: Efficiently slicing data arrays to display only relevant portions, which is crucial for performance and clarity in data visualization.\n- **Event Handling**: Implementing event handlers, such as `onClick` for bars, to enhance interactivity.\n- **Conditional Rendering**: Using conditions within the `onNavigate` function to prevent out-of-bounds navigation, ensuring a robust user experience.\n- **Custom Formatting**: Utilizing a formatter function to customize the display of total values, demonstrating flexibility in data presentation.",
      "use_cases_description": "This example is particularly useful in scenarios where data visualization needs to be interactive and customizable. It can be applied in dashboards for business analytics, where users need to navigate through different time periods or data segments. The ability to click on bars and see formatted totals makes it suitable for financial reports, sales data analysis, or any application where detailed data insights are required. The navigation feature allows users to explore data without overwhelming them with too much information at once, making it ideal for applications with large datasets."
    },
    {
      "example_name": "With negative values",
      "example_description": "The bar chart support negative value with `Chart.HorizontalBar` component.\n```jsx live\nfunction BarChart() {\n  const [currentIndex, setCurrentIndex] = React.useState(0);\n  const numberOfColumns = 6;\n  const data = [\n    { label: '07th', data: [-3, 4, 2, 6, 4, -3, 6] },\n    { label: '14th', data: [3, -5, 2, 4, -5, 3, -3] },\n    { label: '21st', data: [3, -3, 2, 6, 5, 3, -3] },\n  ];\n\n  const labels = ['May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Dec'];\n\n  const navigationMapping = {\n    0: 'prev',\n    [`${labels.length - numberOfColumns}`]: 'next',\n  };\n\n  return (\n    <Box sx={{ height: 560 }}>\n      <Chart.HorizontalBar\n        data={data.map((d) => ({\n          ...d,\n          data: d.data.slice(currentIndex, currentIndex + numberOfColumns),\n        }))}\n        xAxisConfig={{\n          maxValue: 10,\n          tick: {\n            interval: 2,\n          },\n          step: 10,\n        }}\n        yAxisConfig={{\n          labels: labels.slice(currentIndex, currentIndex + numberOfColumns),\n          title: 'Vertical Title',\n        }}\n        legendConfig={{\n          selectable: false,\n          viewMoreText: 'More',\n          maxLegend: 4,\n        }}\n        navigationConfig={{\n          visible: true,\n          onNavigate: (direction) => {\n            if (direction === 'next') {\n              if (currentIndex + numberOfColumns >= labels.length) return;\n              setCurrentIndex(currentIndex + 1);\n            }\n            if (direction === 'prev') {\n              if (currentIndex === 0) return;\n              setCurrentIndex(currentIndex - 1);\n            }\n          },\n          disabledButtons: navigationMapping[currentIndex],\n        }}\n        data-test-id=\"horizontal-bar-chart\"\n      />\n    </Box>\n  );\n}\n```",
      "code": "function BarChart() {\n  const [currentIndex, setCurrentIndex] = React.useState(0);\n  const numberOfColumns = 6;\n  const data = [\n    { label: '07th', data: [-3, 4, 2, 6, 4, -3, 6] },\n    { label: '14th', data: [3, -5, 2, 4, -5, 3, -3] },\n    { label: '21st', data: [3, -3, 2, 6, 5, 3, -3] },\n  ];\n\n  const labels = ['May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Dec'];\n\n  const navigationMapping = {\n    0: 'prev',\n    [`${labels.length - numberOfColumns}`]: 'next',\n  };\n\n  return (\n    <Box sx={{ height: 560 }}>\n      <Chart.HorizontalBar\n        data={data.map((d) => ({\n          ...d,\n          data: d.data.slice(currentIndex, currentIndex + numberOfColumns),\n        }))}\n        xAxisConfig={{\n          maxValue: 10,\n          tick: {\n            interval: 2,\n          },\n          step: 10,\n        }}\n        yAxisConfig={{\n          labels: labels.slice(currentIndex, currentIndex + numberOfColumns),\n          title: 'Vertical Title',\n        }}\n        legendConfig={{\n          selectable: false,\n          viewMoreText: 'More',\n          maxLegend: 4,\n        }}\n        navigationConfig={{\n          visible: true,\n          onNavigate: (direction) => {\n            if (direction === 'next') {\n              if (currentIndex + numberOfColumns >= labels.length) return;\n              setCurrentIndex(currentIndex + 1);\n            }\n            if (direction === 'prev') {\n              if (currentIndex === 0) return;\n              setCurrentIndex(currentIndex - 1);\n            }\n          },\n          disabledButtons: navigationMapping[currentIndex],\n        }}\n        data-test-id=\"horizontal-bar-chart\"\n      />\n    </Box>\n  );\n}",
      "purpose_description": "This example demonstrates how to implement a horizontal bar chart using the `Chart.HorizontalBar` component that supports negative values. The chart visualizes data over a series of months, allowing users to navigate through the data using a simple navigation system.",
      "technical_description": "The `BarChart` component utilizes React's state management to track the current index of the data being displayed. It uses the `useState` hook to manage the `currentIndex`, which determines the subset of data and labels to be displayed in the chart. The `Chart.HorizontalBar` component is configured with sliced data and labels based on the `currentIndex` and `numberOfColumns`. The `xAxisConfig` and `yAxisConfig` are set to define the chart's axes properties, including maximum values and labels. The `legendConfig` and `navigationConfig` provide additional customization for the chart's legend and navigation controls, respectively. The navigation logic allows users to move through the data by updating the `currentIndex`, with conditions to prevent navigating beyond the available data range.",
      "patterns_description": "The component demonstrates the use of React's `useState` hook for managing component state, specifically for tracking the current index of the data being displayed. It also shows how to slice arrays dynamically based on state to manage the data displayed in the chart. The use of a mapping object (`navigationMapping`) to conditionally disable navigation buttons is a pattern that enhances user experience by preventing invalid navigation actions. The component also follows best practices by using descriptive prop names and organizing configuration objects for clarity.",
      "use_cases_description": "This example is particularly useful in scenarios where data visualization requires handling of both positive and negative values, such as financial data showing profits and losses over time. It is also applicable in dashboards where users need to navigate through large datasets in a paginated manner, such as monthly reports or historical data analysis. The component's ability to handle negative values and provide navigation controls makes it suitable for interactive data exploration tools."
    },
    {
      "example_name": "With bar custom color",
      "example_description": "The chart support style for the bar color by passing colors attribute into the styleConfig prop.\n```jsx live\nfunction BarChart() {\n  const labels = ['May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Dec'];\n  const data = [\n    { label: '07th', data: [3, 4, 2, 2.5, 4, 3, 6] },\n    { label: '14th', data: [3, 4, 2, 2.5, 5, 3, 3] },\n    { label: '21st', data: [3, 4, 2, 2.5, 2, 3, 6] },\n    { label: '25th', data: [3, 4, 2, 2.5, 6, 3, 4] },\n    { label: '31st', data: [3, 4, 2, 2.5, 7, 3, 6] },\n  ];\n\n  return (\n    <Box sx={{ height: 400 }}>\n      <Chart.Bar\n        data={data}\n        xAxisConfig={{\n          title: 'Horizontal Title',\n        }}\n        yAxisConfig={{\n          title: 'Vertical Title',\n          labels,\n        }}\n        legendConfig={{\n          selectable: true,\n          viewMoreText: 'More',\n          maxLegend: 4,\n        }}\n        styleConfig={{\n          series: [\n            {\n              label: '07th',\n              color: 'dodgerBlueLight30',\n            },\n            {\n              label: '14th',\n              color: 'violetLight30',\n            },\n            {\n              label: '21st',\n              color: 'greenLight30',\n            },\n            {\n              label: '25th',\n              color: 'orangeLight30',\n            },\n            {\n              label: '31st',\n              color: 'purpleLight30',\n            },\n          ],\n        }}\n      />\n    </Box>\n  );\n}\n```",
      "code": "function BarChart() {\n  const labels = ['May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Dec'];\n  const data = [\n    { label: '07th', data: [3, 4, 2, 2.5, 4, 3, 6] },\n    { label: '14th', data: [3, 4, 2, 2.5, 5, 3, 3] },\n    { label: '21st', data: [3, 4, 2, 2.5, 2, 3, 6] },\n    { label: '25th', data: [3, 4, 2, 2.5, 6, 3, 4] },\n    { label: '31st', data: [3, 4, 2, 2.5, 7, 3, 6] },\n  ];\n\n  return (\n    <Box sx={{ height: 400 }}>\n      <Chart.Bar\n        data={data}\n        xAxisConfig={{\n          title: 'Horizontal Title',\n        }}\n        yAxisConfig={{\n          title: 'Vertical Title',\n          labels,\n        }}\n        legendConfig={{\n          selectable: true,\n          viewMoreText: 'More',\n          maxLegend: 4,\n        }}\n        styleConfig={{\n          series: [\n            {\n              label: '07th',\n              color: 'dodgerBlueLight30',\n            },\n            {\n              label: '14th',\n              color: 'violetLight30',\n            },\n            {\n              label: '21st',\n              color: 'greenLight30',\n            },\n            {\n              label: '25th',\n              color: 'orangeLight30',\n            },\n            {\n              label: '31st',\n              color: 'purpleLight30',\n            },\n          ],\n        }}\n      />\n    </Box>\n  );\n}",
      "purpose_description": "This example demonstrates how to customize the color of bars in a bar chart using the Chart.Bar component. It highlights the ability to specify different colors for each data series by using the styleConfig prop, which allows for enhanced visual differentiation and styling of the chart.",
      "technical_description": "The BarChart component is a functional React component that renders a bar chart using the Chart.Bar component. It defines a set of labels and data series, each with a label and an array of data points. The component uses the Box component to set a fixed height for the chart. The Chart.Bar component is configured with several props: data, xAxisConfig, yAxisConfig, legendConfig, and styleConfig. The styleConfig prop is particularly important as it allows for the customization of bar colors by specifying a color for each data series. This is achieved by passing an array of series objects, each containing a label and a corresponding color.",
      "patterns_description": "This example demonstrates the use of configuration objects to customize chart components, a common pattern in React for managing complex component configurations. It also shows the use of functional components and JSX to structure the component's UI. The use of the styleConfig prop to customize the appearance of the chart is a best practice for separating styling from logic, making the component more maintainable and flexible.",
      "use_cases_description": "This example is particularly useful in scenarios where visual differentiation of data series is important, such as in dashboards or reports where multiple data series need to be compared. It can be used in business intelligence applications, data analysis tools, or any application that requires customizable and visually appealing data visualizations. The ability to customize bar colors can help in aligning the chart's appearance with a brand's color scheme or to highlight specific data series for emphasis."
    }
  ]
}