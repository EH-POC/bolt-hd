{
  "component_name": "Basic Table",
  "component_description": "A table displays a collection of structured data in rows.\nHelp users get an at-a-glance summary of the data to perform actions or navigate to a full-page representation of it.\nOrganise information in an easy to scan way so that users can look for patterns and develop insights from data.",
  "props": {
    "bulkCheckSettings": {
      "name": "bulkCheckSettings",
      "type": "BulkCheckSettingsProps<D>",
      "required": false,
      "description": "The objects to custom the bulk check items, bulkCheckSettings is an object of:\n- disableCheckRule: the function to help us set disabled for checkbox of specific row.\n- bulkHeaderRenderer: the function to help us custom the select all checkbox.\n- bulkItemRerender: the function to help us custom the item checkbox for each row."
    },
    "className": {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "A space-delimited list of class names to pass along to the element."
    },
    "columns": {
      "name": "columns",
      "type": "Array<intersection>",
      "required": true,
      "description": "Array of table columns. Some notes when you provide this prop:\n* Must be memoized.\n* Column must be an object of:\n    * Cell?: a React component to render the cell at column. Checkout this example https://design.employmenthero.com/web/Components/Table/#cell-customisation for further information.\n    * Filter?:"
    },
    "contextMenuConfig": {
      "name": "contextMenuConfig",
      "type": "ContextMenuConfig<D>",
      "required": false,
      "description": "Configuration for the context menu that appears when right-clicking on a cell.\n- items: Array of menu items or a function that returns menu items based on row data and column ID."
    },
    "data": {
      "name": "data",
      "type": "Array<D>",
      "required": true,
      "description": "Array of D (D is the generic type of data element you pass in)."
    },
    "data-test-id": {
      "name": "data-test-id",
      "type": "string",
      "required": false,
      "description": "Testing id of the element."
    },
    "editableConfig": {
      "name": "editableConfig",
      "type": "{ onPaste: (__namedParameters: CopyAndPasteMeta) => void }",
      "required": false,
      "description": "Configuration for editable cells.\nThis configuration allows for handling paste events in editable cells."
    },
    "expandedRows": {
      "name": "expandedRows",
      "type": "Record<SxKeys, SxValues>",
      "required": false,
      "description": "Controlled expanded rows state, expandedRows is an object of:\n- key: row index.\n- value: boolean. True means the row at index is expanded."
    },
    "expansion": {
      "name": "expansion",
      "type": "{ expandedRowRenderer: (rowData: D) => ReactElement; rowExpandable: (rowData: D) => boolean }",
      "required": false,
      "description": "Whether the table has expanded rows. When expansion is available, its data shape must be an object of:\n- expandedRowRenderer: a render function '(rowData: D) => ReactElement' to render the expanded row.\n- rowExpandable: a predicate function '(rowData: D) => boolean' to decide a row is expandable or not."
    },
    "filters": {
      "name": "filters",
      "type": "Filters<D>",
      "required": false,
      "description": "Controlled filters value, Filters is an array of:\n- id: column id, this matches with accessor configuration.\n- value: filter value"
    },
    "groupingConfig": {
      "name": "groupingConfig",
      "type": "{ collapsedByDefaultGroups?: Array<string>; groupBy: (rows: Array<Row<D>>) => Record<SxKeys, Array<Row<D>>>; groupRenderer?: Record<SxKeys, (__namedParameters: { groupedRows: Array<Row<D>> }) => ReactElement> }",
      "required": false,
      "description": "Configuration for grouping rows in the table. When groupingConfig is provided, the data will be grouped by the groupBy function.\n- groupBy: a function to group the data.\n- collapsedByDefaultGroups: an array of group keys that will be collapsed by default."
    },
    "horizontallySticky": {
      "name": "horizontallySticky",
      "type": "boolean",
      "required": false,
      "description": "Whether the table's first column(s) sticks to the left when scroll horizontally on small screen size devices."
    },
    "id": {
      "name": "id",
      "type": "string",
      "required": false,
      "description": "Id of the element."
    },
    "itemsPerPage": {
      "name": "itemsPerPage",
      "type": "{ options: Array<{ text: string; value: string | number }>; value?: string | number }",
      "required": false,
      "description": "Controlled items per page, itemsPerPages is an object of:\n- options: array of Select (https://design.employmenthero.com/web/Components/Select/#select-1) options.\n- value: selected items per page value."
    },
    "loading": {
      "name": "loading",
      "type": "boolean",
      "required": false,
      "description": "Loading state of Table, which will render a spinner in the center of table."
    },
    "manualSortBy": {
      "name": "manualSortBy",
      "type": "boolean",
      "required": false,
      "description": "Enables sorting detection functionality, but does not automatically perform row sorting.\nTurn this on if you wish to implement your own sorting outside of the table"
    },
    "noData": {
      "name": "noData",
      "type": "ReactNode | EmptyDataProps",
      "required": false,
      "description": "Content to render when there is no data in the table."
    },
    "onExpandedRowsChange": {
      "name": "onExpandedRowsChange",
      "type": "(expandedRows: Record<SxKeys, SxValues>) => void",
      "required": false,
      "description": "Callback invoked when any row is expanded or collapsed. expandedRows is an object of:\n- key: row index.\n- value: boolean. True means the row at index is expanded."
    },
    "onFiltersChange": {
      "name": "onFiltersChange",
      "type": "(filters: Filters<D>) => void",
      "required": false,
      "description": "Callback invoked when filters are changed. Filters is an array of:\n- id: column id, this matches with accessor configuration.\n- value: filter value"
    },
    "onItemsPerPageChange": {
      "name": "onItemsPerPageChange",
      "type": "(itemsPerPage: string | number) => void",
      "required": false,
      "description": "Callback invoked when items per page selection is changed."
    },
    "onPaginationChange": {
      "name": "onPaginationChange",
      "type": "(page: number) => void",
      "required": false,
      "description": "Callback invoked when a page in pagination is changed."
    },
    "onSelectedRowsChange": {
      "name": "onSelectedRowsChange",
      "type": "(selectedRows: Record<SxKeys, SxValues>) => void",
      "required": false,
      "description": "Callback invoked when any row is selected or deselected. selectedRows is an object of:\n- key: row index.\n- value: boolean. True means the row at index is selected."
    },
    "onSortByChange": {
      "name": "onSortByChange",
      "type": "(sortBy: Array<SortingRule<D>>) => void",
      "required": false,
      "description": "Callback invoked when sorting is changed. sortBy is an array of:\n- id: column id, this matches with accessor configuration.\n- desc: boolean, true means sorting descendingly."
    },
    "pagination": {
      "name": "pagination",
      "type": "{ current: number; total: number }",
      "required": false,
      "description": "Whether the table has pagination. When pagination is ON, its data shape must be an object of:\n- current: a number which is 1-based indexing to indicate the current selected page.\n- total: a number indicates the total of pages."
    },
    "rows": {
      "name": "rows",
      "type": "{ generateClassName?: (row: Row<D>) => undefined | string; rowIdExtractor?: (row: D, index: number) => string }",
      "required": false,
      "description": "An object for rows configuration, it must be memoized."
    },
    "selectable": {
      "name": "selectable",
      "type": "boolean",
      "required": false,
      "description": "Whether the table is allowed using checkbox to select table rows."
    },
    "selectedRows": {
      "name": "selectedRows",
      "type": "Record<SxKeys, SxValues>",
      "required": false,
      "description": "Controlled selected rows state, selectedRows is an object of:\n- key: key is the row id extracted from  `rowIdExtractor` . Default value is row index.\n- value: boolean. True means the row at index is selected."
    },
    "sortBy": {
      "name": "sortBy",
      "type": "Array<SortingRule<D>>",
      "required": false,
      "description": "Controlled sortBy state, sortBy is an array of:\n- id: column id, this matches with accessor configuration.\n- desc: boolean, true means sorting descendingly."
    },
    "sticky": {
      "name": "sticky",
      "type": "boolean",
      "required": false,
      "description": "Whether the table's header sticks to the top."
    },
    "stickyConfig": {
      "name": "stickyConfig",
      "type": "{ nColumns?: number }",
      "required": false,
      "description": "Set the number of columns or rows that are sticky\n- nColumns: number of columns that are sticky. This only works when horizontallySticky is  `true` ."
    },
    "style": {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "Additional inline style to be applied for the most outer element of the component."
    },
    "sx": {
      "name": "sx",
      "type": "Partial<Record<SxKeys, SxValues>>",
      "required": false,
      "description": "[Theme-aware style property](/guidelines/sxProp)"
    },
    "variant": {
      "name": "variant",
      "type": "\"grid\" | \"basic\"",
      "required": false,
      "description": "Table style."
    }
  },
  "examples": [
    {
      "example_name": "Multilevel header",
      "example_description": "Customise multilevel header rendering by providing columns inside column.\n```jsx live\nfunction MultilevelHeader() {\n  const actions = [\n    {\n      icon: 'checkmark',\n      text: 'Accept',\n      onClick: () => alert('Accept leave'),\n    },\n    {\n      icon: 'cancel',\n      text: 'Decline',\n      onClick: () => alert('Decline leave'),\n      divider: 'bottom',\n    },\n    {\n      icon: 'eye-outlined',\n      text: 'View',\n      onClick: () => alert('View leave'),\n    },\n    {\n      icon: 'pencil-outlined',\n      text: 'Edit',\n      onClick: () => alert('Edit leave'),\n    },\n    {\n      icon: 'box-outlined',\n      text: 'Archive',\n      onClick: () => alert('Archive leave'),\n    },\n    {\n      icon: 'trash-bin-outlined',\n      text: 'Delete',\n      intent: 'danger',\n      divider: 'top',\n      onClick: () => alert('Delete leave'),\n    },\n  ].filter(Boolean);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        align: 'center',\n        columns: [\n          {\n            Header: 'First Name',\n            accessor: 'firstName',\n            Cell: ({ value }) => (\n              <Button.Link href=\"#\" text={value} target=\"_blank\" />\n            ),\n            width: '20%',\n          },\n          { Header: 'Last Name', accessor: 'lastName' },\n        ],\n      },\n      {\n        Header: 'Birth',\n        align: 'center',\n        columns: [\n          {\n            Header: 'Day',\n            accessor: 'day',\n          },\n          { Header: 'Month', accessor: 'month' },\n          { Header: 'Year', accessor: 'year' },\n        ],\n      },\n      {\n        Header: 'Actions',\n        accessor: '',\n        disableSortBy: true,\n        Cell: () => {\n          return <Table.RowAction actions={actions} />;\n        },\n      },\n    ],\n    []\n  );\n  const data = [\n    { firstName: 'Vinh', lastName: 'Phan', day: 16, month: 7, year: 1999 },\n    { firstName: 'Dao', lastName: 'Hau', day: 23, month: 1, year: 1995 },\n    { firstName: 'Kien', lastName: 'Tran', day: 12, month: 3, year: 1989 },\n    { firstName: 'Phuc', lastName: 'Dang', day: 22, month: 3, year: 1996 },\n    { firstName: 'Luan', lastName: 'Lai', day: 22, month: 1, year: 2000 },\n  ];\n  return <Table data={data} columns={columns} />;\n}\n```",
      "code": "function MultilevelHeader() {\n  const actions = [\n    {\n      icon: 'checkmark',\n      text: 'Accept',\n      onClick: () => alert('Accept leave'),\n    },\n    {\n      icon: 'cancel',\n      text: 'Decline',\n      onClick: () => alert('Decline leave'),\n      divider: 'bottom',\n    },\n    {\n      icon: 'eye-outlined',\n      text: 'View',\n      onClick: () => alert('View leave'),\n    },\n    {\n      icon: 'pencil-outlined',\n      text: 'Edit',\n      onClick: () => alert('Edit leave'),\n    },\n    {\n      icon: 'box-outlined',\n      text: 'Archive',\n      onClick: () => alert('Archive leave'),\n    },\n    {\n      icon: 'trash-bin-outlined',\n      text: 'Delete',\n      intent: 'danger',\n      divider: 'top',\n      onClick: () => alert('Delete leave'),\n    },\n  ].filter(Boolean);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        align: 'center',\n        columns: [\n          {\n            Header: 'First Name',\n            accessor: 'firstName',\n            Cell: ({ value }) => (\n              <Button.Link href=\"#\" text={value} target=\"_blank\" />\n            ),\n            width: '20%',\n          },\n          { Header: 'Last Name', accessor: 'lastName' },\n        ],\n      },\n      {\n        Header: 'Birth',\n        align: 'center',\n        columns: [\n          {\n            Header: 'Day',\n            accessor: 'day',\n          },\n          { Header: 'Month', accessor: 'month' },\n          { Header: 'Year', accessor: 'year' },\n        ],\n      },\n      {\n        Header: 'Actions',\n        accessor: '',\n        disableSortBy: true,\n        Cell: () => {\n          return <Table.RowAction actions={actions} />;\n        },\n      },\n    ],\n    []\n  );\n  const data = [\n    { firstName: 'Vinh', lastName: 'Phan', day: 16, month: 7, year: 1999 },\n    { firstName: 'Dao', lastName: 'Hau', day: 23, month: 1, year: 1995 },\n    { firstName: 'Kien', lastName: 'Tran', day: 12, month: 3, year: 1989 },\n    { firstName: 'Phuc', lastName: 'Dang', day: 22, month: 3, year: 1996 },\n    { firstName: 'Luan', lastName: 'Lai', day: 22, month: 1, year: 2000 },\n  ];\n  return <Table data={data} columns={columns} />;\n}",
      "purpose_description": "The purpose of this React component example is to demonstrate how to create a table with a multilevel header structure. This is achieved by nesting column definitions within each other, allowing for a more complex and organized table header layout. The example also showcases how to integrate action buttons within table rows, providing interactive functionalities such as accepting, declining, viewing, editing, archiving, and deleting entries.",
      "technical_description": "The component uses React's useMemo hook to memoize the columns configuration, ensuring that the table's structure is only recalculated when necessary, thus optimizing performance. The columns are defined with nested structures, where each top-level column can contain sub-columns. For instance, the 'Name' column contains 'First Name' and 'Last Name' as sub-columns. The 'Actions' column is configured to render a set of action buttons using a custom Table.RowAction component, which receives an array of action objects. Each action object specifies an icon, text, and an onClick handler function that triggers an alert when the action is selected. The data for the table is a static array of objects, each representing a row in the table with fields corresponding to the column accessors.",
      "patterns_description": "This example demonstrates several React and JavaScript patterns, including:\n- **Memoization with useMemo**: Used to optimize performance by preventing unnecessary recalculations of the columns configuration.\n- **Nested Column Definitions**: Allows for multilevel headers by nesting column definitions within each other.\n- **Custom Cell Rendering**: The use of the `Cell` prop to render custom content within table cells, such as links or action buttons.\n- **Action Handling**: Encapsulating action logic within objects that are passed to a component, promoting reusability and separation of concerns.",
      "use_cases_description": "This multilevel header table component is particularly useful in scenarios where data needs to be presented in a structured and hierarchical manner, such as in dashboards, admin panels, or any application that requires complex data visualization. The ability to include interactive actions within table rows makes it suitable for applications that require user interaction, such as managing user accounts, processing requests, or handling inventory items."
    },
    {
      "example_name": "Accessing the original row data in a cell.",
      "example_description": "It is common to access to other fields of row data to handle logic in a customised cell. The row data object from the `data` array is also passed as the prop `row.original` of `Cell`.\n```jsx live\nfunction TableRowData() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n        Cell: ({ value }) => (\n          <Button.Link href=\"#\" text={value} target=\"_blank\" />\n        ),\n      },\n      { Header: 'Age', accessor: 'age' },\n      {\n        Header: 'Status',\n        accessor: 'status',\n        disableSortBy: true,\n        Cell: ({ value, row: { original } }) => (\n          <Tag\n            text={value}\n            intent=\"success\"\n            variant={original.age >= 18 ? 'filled' : 'outlined'}\n          />\n        ),\n      },\n    ],\n    []\n  );\n  const data = [\n    { name: 'Vy Nguyen', age: 50, status: 'Single' },\n    { name: 'Hau Dao', age: 51, status: 'Single' },\n    { name: 'Hanh Le', age: 80, status: 'Complicated' },\n    { name: 'Tuan Thieu', age: 99, status: 'In relationship' },\n    { name: 'Vinh Tony', age: 16, status: 'Single' },\n  ];\n  return <Table data={data} columns={columns} />;\n}\n```",
      "code": "function TableRowData() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n        Cell: ({ value }) => (\n          <Button.Link href=\"#\" text={value} target=\"_blank\" />\n        ),\n      },\n      { Header: 'Age', accessor: 'age' },\n      {\n        Header: 'Status',\n        accessor: 'status',\n        disableSortBy: true,\n        Cell: ({ value, row: { original } }) => (\n          <Tag\n            text={value}\n            intent=\"success\"\n            variant={original.age >= 18 ? 'filled' : 'outlined'}\n          />\n        ),\n      },\n    ],\n    []\n  );\n  const data = [\n    { name: 'Vy Nguyen', age: 50, status: 'Single' },\n    { name: 'Hau Dao', age: 51, status: 'Single' },\n    { name: 'Hanh Le', age: 80, status: 'Complicated' },\n    { name: 'Tuan Thieu', age: 99, status: 'In relationship' },\n    { name: 'Vinh Tony', age: 16, status: 'Single' },\n  ];\n  return <Table data={data} columns={columns} />;\n}",
      "purpose_description": "This example demonstrates how to access the original row data within a cell in a React table component. It showcases how to use additional row data to customize the rendering of a cell, specifically by using the `row.original` prop to access other fields of the row data object.",
      "technical_description": "The component `TableRowData` defines a table with columns and data using React's `useMemo` hook to optimize performance by memoizing the columns configuration. The columns array defines three columns: 'Name', 'Age', and 'Status'. Each column has a `Header` and an `accessor` which maps to the keys in the data objects. The 'Name' column uses a custom cell renderer that renders a `Button.Link` component with the name value. The 'Status' column also uses a custom cell renderer, which accesses the `row.original` prop to determine the `variant` of a `Tag` component based on the age of the person. The `disableSortBy` property is set to true for the 'Status' column to disable sorting. The data array contains objects representing each row of the table, with fields for name, age, and status. The `Table` component is then rendered with the data and columns passed as props.",
      "patterns_description": "This example uses the `useMemo` hook to memoize the columns configuration, which is a common performance optimization pattern in React to prevent unnecessary re-renders. The use of custom cell renderers allows for flexible and dynamic rendering of table cells based on the row data. Accessing `row.original` within a cell renderer is a powerful technique for customizing cell content based on other fields in the row data.",
      "use_cases_description": "This example is particularly useful in scenarios where table cells need to be customized based on multiple fields of the row data. For instance, in a user management system, you might want to display different styles or actions based on the user's role or status. This pattern is also applicable in dashboards or reporting tools where data visualization needs to be dynamic and context-aware."
    },
    {
      "example_name": "Responsive by freezing first column(s) in small screens",
      "example_description": "When using with `horizontallySticky` prop, the first column(s) of the table will become sticky on small screens (small enough for the table to be horizontally scrollable).\n```jsx live\nfunction FreezingColumn() {\n  const actions = [\n    {\n      icon: 'checkmark',\n      text: 'Accept',\n      onClick: () => alert('Accept leave'),\n    },\n    {\n      icon: 'cancel',\n      text: 'Decline',\n      onClick: () => alert('Decline leave'),\n      divider: 'bottom',\n    },\n    {\n      icon: 'eye-outlined',\n      text: 'View',\n      onClick: () => alert('View leave'),\n    },\n    {\n      icon: 'pencil-outlined',\n      text: 'Edit',\n      onClick: () => alert('Edit leave'),\n    },\n    {\n      icon: 'box-outlined',\n      text: 'Archive',\n      onClick: () => alert('Archive leave'),\n    },\n    {\n      icon: 'trash-bin-outlined',\n      text: 'Delete',\n      intent: 'danger',\n      divider: 'top',\n      onClick: () => alert('Delete leave'),\n    },\n  ].filter(Boolean);\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n        Cell: ({ value }) => (\n          <Button.Link href=\"#\" text={value} target=\"_blank\" />\n        ),\n      },\n      { Header: 'Age', accessor: 'age' },\n      {\n        Header: 'Marital Status',\n        accessor: 'maritalStatus',\n        disableSortBy: true,\n        Cell: ({ value }) => (\n          <Tag text={value} intent=\"success\" variant=\"filled\" />\n        ),\n      },\n      {\n        Header: 'Gender Status',\n        accessor: 'genderStatus',\n        disableSortBy: true,\n        Cell: ({ value }) => (\n          <Tag text={value} intent=\"success\" variant=\"filled\" />\n        ),\n      },\n      {\n        Header: 'Direct Personnel',\n        accessor: 'directPersonnel',\n        disableSortBy: true,\n      },\n      {\n        Header: 'Actions',\n        accessor: '',\n        disableSortBy: true,\n        Cell: () => {\n          return <Table.RowAction actions={actions} />;\n        },\n      },\n    ],\n    []\n  );\n  const expansionConfig = React.useMemo(\n    () => ({\n      expandedRowRenderer: (rowData) => (\n        <tr>\n          <td\n            colSpan={columns.length + 2}\n            style={{\n              padding: `${theme.space.large}px 0`,\n              margin: 0,\n              textAlign: 'center',\n            }}\n          >\n            <Typography.Text>{`Name: ${rowData.name}; Info: ${rowData.age} - ${rowData.status}`}</Typography.Text>\n          </td>\n        </tr>\n      ),\n      rowExpandable: (rowData) => rowData.age >= 18,\n    }),\n    []\n  );\n  const [expandedRows, setExpandedRows] = React.useState({ 0: true });\n  const [selectedRows, setSelectedRows] = React.useState({ 0: true });\n  const data = [\n    {\n      name: 'Vy Nguyen',\n      age: 50,\n      profile: 'https://employmenthero.com/',\n      maritalStatus: 'Single',\n      genderStatus: 'Male',\n      directPersonnel: 'Indirect',\n    },\n    {\n      name: 'Hau Dao',\n      age: 51,\n      profile: 'https://employmenthero.com/',\n      maritalStatus: 'Single',\n      genderStatus: 'Male',\n      directPersonnel: 'Indirect',\n    },\n    {\n      name: 'Hanh Le',\n      age: 80,\n      profile: 'https://employmenthero.com/',\n      maritalStatus: 'Complicated',\n      genderStatus: 'Male',\n      directPersonnel: 'Direct',\n    },\n    {\n      name: 'Tuan Thieu',\n      age: 99,\n      profile: 'https://employmenthero.com/',\n      maritalStatus: 'In relationship',\n      genderStatus: 'Male',\n      directPersonnel: 'Indirect',\n    },\n    {\n      name: 'Vinh Tony',\n      age: 21,\n      profile: 'https://employmenthero.com/',\n      maritalStatus: 'Single',\n      genderStatus: 'Male',\n      directPersonnel: 'Direct',\n    },\n  ];\n  return (\n    <Grid>\n      <Grid.Row gutter={['small', 'small']}>\n        <Grid.Col span={[24, 16, 16, 8, 8]} offset={[0, 4, 4, 0, 0]}>\n          <Table data={data} columns={columns} horizontallySticky />\n        </Grid.Col>\n        <Grid.Col span={[24, 16, 16, 8, 8]} offset={[0, 4, 4, 0, 0]}>\n          <Table\n            data={data}\n            columns={columns}\n            selectable\n            selectedRows={selectedRows}\n            onSelectedRowsChange={setSelectedRows}\n            horizontallySticky\n          />\n        </Grid.Col>\n        <Grid.Col span={[24, 16, 16, 8, 8]} offset={[0, 4, 4, 0, 0]}>\n          <Table\n            data={data}\n            columns={columns}\n            selectable\n            expansion={expansionConfig}\n            expandedRows={expandedRows}\n            onExpandedRowsChange={setExpandedRows}\n            horizontallySticky\n          />\n        </Grid.Col>\n      </Grid.Row>\n    </Grid>\n  );\n}\n```",
      "code": "function FreezingColumn() {\n  const actions = [\n    {\n      icon: 'checkmark',\n      text: 'Accept',\n      onClick: () => alert('Accept leave'),\n    },\n    {\n      icon: 'cancel',\n      text: 'Decline',\n      onClick: () => alert('Decline leave'),\n      divider: 'bottom',\n    },\n    {\n      icon: 'eye-outlined',\n      text: 'View',\n      onClick: () => alert('View leave'),\n    },\n    {\n      icon: 'pencil-outlined',\n      text: 'Edit',\n      onClick: () => alert('Edit leave'),\n    },\n    {\n      icon: 'box-outlined',\n      text: 'Archive',\n      onClick: () => alert('Archive leave'),\n    },\n    {\n      icon: 'trash-bin-outlined',\n      text: 'Delete',\n      intent: 'danger',\n      divider: 'top',\n      onClick: () => alert('Delete leave'),\n    },\n  ].filter(Boolean);\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n        Cell: ({ value }) => (\n          <Button.Link href=\"#\" text={value} target=\"_blank\" />\n        ),\n      },\n      { Header: 'Age', accessor: 'age' },\n      {\n        Header: 'Marital Status',\n        accessor: 'maritalStatus',\n        disableSortBy: true,\n        Cell: ({ value }) => (\n          <Tag text={value} intent=\"success\" variant=\"filled\" />\n        ),\n      },\n      {\n        Header: 'Gender Status',\n        accessor: 'genderStatus',\n        disableSortBy: true,\n        Cell: ({ value }) => (\n          <Tag text={value} intent=\"success\" variant=\"filled\" />\n        ),\n      },\n      {\n        Header: 'Direct Personnel',\n        accessor: 'directPersonnel',\n        disableSortBy: true,\n      },\n      {\n        Header: 'Actions',\n        accessor: '',\n        disableSortBy: true,\n        Cell: () => {\n          return <Table.RowAction actions={actions} />;\n        },\n      },\n    ],\n    []\n  );\n  const expansionConfig = React.useMemo(\n    () => ({\n      expandedRowRenderer: (rowData) => (\n        <tr>\n          <td\n            colSpan={columns.length + 2}\n            style={{\n              padding: `${theme.space.large}px 0`,\n              margin: 0,\n              textAlign: 'center',\n            }}\n          >\n            <Typography.Text>{`Name: ${rowData.name}; Info: ${rowData.age} - ${rowData.status}`}</Typography.Text>\n          </td>\n        </tr>\n      ),\n      rowExpandable: (rowData) => rowData.age >= 18,\n    }),\n    []\n  );\n  const [expandedRows, setExpandedRows] = React.useState({ 0: true });\n  const [selectedRows, setSelectedRows] = React.useState({ 0: true });\n  const data = [\n    {\n      name: 'Vy Nguyen',\n      age: 50,\n      profile: 'https://employmenthero.com/',\n      maritalStatus: 'Single',\n      genderStatus: 'Male',\n      directPersonnel: 'Indirect',\n    },\n    {\n      name: 'Hau Dao',\n      age: 51,\n      profile: 'https://employmenthero.com/',\n      maritalStatus: 'Single',\n      genderStatus: 'Male',\n      directPersonnel: 'Indirect',\n    },\n    {\n      name: 'Hanh Le',\n      age: 80,\n      profile: 'https://employmenthero.com/',\n      maritalStatus: 'Complicated',\n      genderStatus: 'Male',\n      directPersonnel: 'Direct',\n    },\n    {\n      name: 'Tuan Thieu',\n      age: 99,\n      profile: 'https://employmenthero.com/',\n      maritalStatus: 'In relationship',\n      genderStatus: 'Male',\n      directPersonnel: 'Indirect',\n    },\n    {\n      name: 'Vinh Tony',\n      age: 21,\n      profile: 'https://employmenthero.com/',\n      maritalStatus: 'Single',\n      genderStatus: 'Male',\n      directPersonnel: 'Direct',\n    },\n  ];\n  return (\n    <Grid>\n      <Grid.Row gutter={['small', 'small']}>\n        <Grid.Col span={[24, 16, 16, 8, 8]} offset={[0, 4, 4, 0, 0]}>\n          <Table data={data} columns={columns} horizontallySticky />\n        </Grid.Col>\n        <Grid.Col span={[24, 16, 16, 8, 8]} offset={[0, 4, 4, 0, 0]}>\n          <Table\n            data={data}\n            columns={columns}\n            selectable\n            selectedRows={selectedRows}\n            onSelectedRowsChange={setSelectedRows}\n            horizontallySticky\n          />\n        </Grid.Col>\n        <Grid.Col span={[24, 16, 16, 8, 8]} offset={[0, 4, 4, 0, 0]}>\n          <Table\n            data={data}\n            columns={columns}\n            selectable\n            expansion={expansionConfig}\n            expandedRows={expandedRows}\n            onExpandedRowsChange={setExpandedRows}\n            horizontallySticky\n          />\n        </Grid.Col>\n      </Grid.Row>\n    </Grid>\n  );\n}",
      "purpose_description": "The purpose of this React component example is to demonstrate how to create a responsive table with sticky columns that remain visible when the table is horizontally scrollable on small screens. This is achieved using the `horizontallySticky` prop, which ensures that the first column(s) of the table are fixed and always visible, enhancing usability on smaller devices.",
      "technical_description": "The `FreezingColumn` component utilizes React hooks such as `useMemo` and `useState` to manage table configurations and state. The `columns` array is memoized to prevent unnecessary re-renders, and it defines the structure and behavior of each column, including custom cell rendering and disabling sorting for certain columns. The `expansionConfig` is also memoized and provides functionality for expandable rows, allowing additional details to be displayed for rows meeting certain conditions. The component renders a grid layout with three instances of a `Table` component, each demonstrating different features such as row selection and expansion. The `horizontallySticky` prop is applied to each table to enable the sticky column behavior.",
      "patterns_description": "This example demonstrates several React patterns and best practices, including:\n- Using `React.useMemo` to optimize performance by memoizing column and expansion configurations.\n- Managing component state with `React.useState` for selected and expanded rows.\n- Implementing custom cell rendering to enhance table functionality and appearance.\n- Utilizing a grid layout to organize multiple table instances responsively.\n- Applying the `horizontallySticky` prop to achieve a sticky column effect, improving usability on small screens.",
      "use_cases_description": "This example is particularly useful in scenarios where tables with many columns need to be displayed on small screens, such as mobile devices. By making the first column(s) sticky, users can easily identify rows while scrolling horizontally. This pattern is beneficial for applications that require displaying detailed data, such as employee records, product listings, or any dataset where maintaining context while scrolling is important. The expandable rows feature also adds value by allowing additional information to be displayed without cluttering the main table view."
    },
    {
      "example_name": "Pagination",
      "example_description": "Pagination is one of table advanced feature. To enable it, we need to:\nPassing `pagination` configuration.\nProvide `onPaginationChange` callback to control the selected page value.\nWe may display items per page selection by:\nPassing `itemsPerPage` configuration.\nProvide `onItemsPerPageChange` callback to control the selected items per page.\n```jsx live\nfunction PaginationTable() {\n  const [itemsPerPageValue, setItemsPerPageValue] = React.useState('20');\n  const itemsPerPageOptions = React.useMemo(() => [\n    { value: '20', text: '20 / page' },\n    { value: '50', text: '50 / page' },\n    { value: '100', text: '100 / page' },\n  ]);\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n        Cell: ({ value }) => (\n          <Button.Link href={value} text={value} target=\"_blank\" />\n        ),\n      },\n      { Header: 'Age', accessor: 'age', displayAtBreakpoint: 'medium' },\n      {\n        Header: 'Status',\n        accessor: 'status',\n        disableSortBy: true,\n        Cell: ({ value }) => (\n          <Tag text={value} intent=\"success\" variant=\"filled\" />\n        ),\n      },\n    ],\n    []\n  );\n  const paginatedData = [\n    [\n      { name: 'Vy Nguyen', age: 50, status: 'Single' },\n      { name: 'Hau Dao', age: 51, status: 'Single' },\n      { name: 'Hanh Le', age: 80, status: 'Complicated' },\n    ],\n    [\n      { name: 'Tuan Thieu', age: 99, status: 'In relationship' },\n      { name: 'Vinh Tony', age: 21, status: 'Single' },\n      { name: 'Son Trinh', age: 69, status: 'Separated' },\n    ],\n  ];\n  const [currentPage, setCurrentPage] = React.useState(1);\n  // The pagination.current is 1-based index, JS array is 0-based index.\n  return (\n    <Table\n      data={paginatedData[currentPage - 1]}\n      columns={columns}\n      pagination={{ current: currentPage, total: paginatedData.length }}\n      onPaginationChange={setCurrentPage}\n      itemsPerPage={{\n        value: itemsPerPageValue,\n        options: itemsPerPageOptions,\n      }}\n      onItemsPerPageChange={setItemsPerPageValue}\n    />\n  );\n}\n```",
      "code": "function PaginationTable() {\n  const [itemsPerPageValue, setItemsPerPageValue] = React.useState('20');\n  const itemsPerPageOptions = React.useMemo(() => [\n    { value: '20', text: '20 / page' },\n    { value: '50', text: '50 / page' },\n    { value: '100', text: '100 / page' },\n  ]);\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n        Cell: ({ value }) => (\n          <Button.Link href={value} text={value} target=\"_blank\" />\n        ),\n      },\n      { Header: 'Age', accessor: 'age', displayAtBreakpoint: 'medium' },\n      {\n        Header: 'Status',\n        accessor: 'status',\n        disableSortBy: true,\n        Cell: ({ value }) => (\n          <Tag text={value} intent=\"success\" variant=\"filled\" />\n        ),\n      },\n    ],\n    []\n  );\n  const paginatedData = [\n    [\n      { name: 'Vy Nguyen', age: 50, status: 'Single' },\n      { name: 'Hau Dao', age: 51, status: 'Single' },\n      { name: 'Hanh Le', age: 80, status: 'Complicated' },\n    ],\n    [\n      { name: 'Tuan Thieu', age: 99, status: 'In relationship' },\n      { name: 'Vinh Tony', age: 21, status: 'Single' },\n      { name: 'Son Trinh', age: 69, status: 'Separated' },\n    ],\n  ];\n  const [currentPage, setCurrentPage] = React.useState(1);\n  // The pagination.current is 1-based index, JS array is 0-based index.\n  return (\n    <Table\n      data={paginatedData[currentPage - 1]}\n      columns={columns}\n      pagination={{ current: currentPage, total: paginatedData.length }}\n      onPaginationChange={setCurrentPage}\n      itemsPerPage={{\n        value: itemsPerPageValue,\n        options: itemsPerPageOptions,\n      }}\n      onItemsPerPageChange={setItemsPerPageValue}\n    />\n  );\n}",
      "purpose_description": "This example demonstrates how to implement pagination in a React table component. Pagination is a crucial feature for tables that display large datasets, as it allows users to navigate through data in manageable chunks. The example shows how to configure pagination settings, handle page changes, and manage items per page selection.",
      "technical_description": "The component uses React hooks such as useState and useMemo to manage state and memoize values. The useState hook is used to track the current page and the number of items per page. The useMemo hook is used to memoize the columns configuration and the items per page options to prevent unnecessary re-renders. The paginatedData array holds the data for each page, and the current page data is selected based on the currentPage state. The Table component is configured with pagination settings, including the current page and total number of pages, and callbacks for handling page and items per page changes.",
      "patterns_description": "The example demonstrates the use of React hooks for state management and performance optimization. useState is used for managing state variables, while useMemo is used to memoize expensive calculations or configurations that should not be recalculated on every render. The component also uses controlled components pattern for managing pagination and items per page, ensuring that the state is the single source of truth.",
      "use_cases_description": "This example is particularly useful in scenarios where a web application needs to display large datasets in a tabular format, such as admin dashboards, data management systems, or any application where users need to browse through extensive lists of data. It provides a scalable solution for managing data display and user interaction efficiently."
    },
    {
      "example_name": "Column sorting",
      "example_description": "Sorting is enabled by default on every table column, we can optionally control the sorting state by passing: `sortBy` & `onSortByChange`.\n```jsx live\nfunction SortingColumn() {\n  const [sortBy, setSortBy] = React.useState([{ id: 'name', desc: false }]);\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n        Cell: ({ value }) => (\n          <Button.Link href={value} text={value} target=\"_blank\" />\n        ),\n      },\n      { Header: 'Age', accessor: 'age', displayAtBreakpoint: 'medium' },\n      {\n        Header: 'Status',\n        accessor: 'status',\n        disableSortBy: true,\n        Cell: ({ value }) => (\n          <Tag text={value} intent=\"success\" variant=\"filled\" />\n        ),\n      },\n    ],\n    []\n  );\n  const data = [\n    { name: 'Vy Nguyen', age: 50, status: 'Single' },\n    { name: 'Hau Dao', age: 51, status: 'Single' },\n    { name: 'Hanh Le', age: 80, status: 'Complicated' },\n    { name: 'Tuan Thieu', age: 99, status: 'In relationship' },\n    { name: 'Vinh Tony', age: 21, status: 'Single' },\n  ];\n  return (\n    <Table\n      data={data}\n      columns={columns}\n      sortBy={sortBy}\n      onSortByChange={setSortBy}\n    />\n  );\n}\n```",
      "code": "function SortingColumn() {\n  const [sortBy, setSortBy] = React.useState([{ id: 'name', desc: false }]);\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n        Cell: ({ value }) => (\n          <Button.Link href={value} text={value} target=\"_blank\" />\n        ),\n      },\n      { Header: 'Age', accessor: 'age', displayAtBreakpoint: 'medium' },\n      {\n        Header: 'Status',\n        accessor: 'status',\n        disableSortBy: true,\n        Cell: ({ value }) => (\n          <Tag text={value} intent=\"success\" variant=\"filled\" />\n        ),\n      },\n    ],\n    []\n  );\n  const data = [\n    { name: 'Vy Nguyen', age: 50, status: 'Single' },\n    { name: 'Hau Dao', age: 51, status: 'Single' },\n    { name: 'Hanh Le', age: 80, status: 'Complicated' },\n    { name: 'Tuan Thieu', age: 99, status: 'In relationship' },\n    { name: 'Vinh Tony', age: 21, status: 'Single' },\n  ];\n  return (\n    <Table\n      data={data}\n      columns={columns}\n      sortBy={sortBy}\n      onSortByChange={setSortBy}\n    />\n  );\n}",
      "purpose_description": "This example demonstrates how to implement a basic table with column sorting functionality in a React component. The table allows users to sort data by clicking on column headers, and the sorting state can be controlled externally through props.",
      "technical_description": "The component uses React's useState and useMemo hooks to manage state and optimize performance. The useState hook initializes the sorting state with the 'name' column in ascending order. The useMemo hook is used to memoize the columns configuration, ensuring that the columns array is not recreated on every render unless its dependencies change. The Table component is rendered with data, columns, sortBy, and onSortByChange props, where sortBy is the current sorting state and onSortByChange is a callback to update the sorting state.",
      "patterns_description": "The example demonstrates the use of React hooks for state management and performance optimization. The useMemo hook is a best practice for preventing unnecessary re-renders by memoizing complex objects. The component also follows the controlled component pattern by managing the sorting state externally and passing it to the Table component via props.",
      "use_cases_description": "This example is useful in scenarios where a data table needs to be displayed with sortable columns, such as in admin dashboards, data management systems, or any application requiring data visualization and manipulation. It provides a flexible way to control sorting behavior and can be extended to include additional features like filtering or pagination."
    },
    {
      "example_name": "Column layout",
      "example_description": "Column layout can be customised by:\n[Optional] Specify `width` prop for each column to define the width of column.\n[Optional] Specify `align` prop for each column to define the text alignment of the content inside the column. The alignment will be applied both to header & cell. Individual setting is not supported.\n```jsx live\nfunction ColumnLayout() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n        Cell: ({ value }) => (\n          <Button.Link href={value} text={value} target=\"_blank\" />\n        ),\n        align: 'left',\n        width: '15%',\n      },\n      { Header: 'Age', accessor: 'age', align: 'right' },\n    ],\n    []\n  );\n  const data = [\n    { name: 'Vy Nguyen', age: 50 },\n    { name: 'Hau Dao', age: 51 },\n    { name: 'Hanh Le', age: 80 },\n    { name: 'Tuan Thieu', age: 99 },\n    { name: 'Vinh Tony', age: 21 },\n  ];\n  return <Table data={data} columns={columns} />;\n}\n```",
      "code": "function ColumnLayout() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n        Cell: ({ value }) => (\n          <Button.Link href={value} text={value} target=\"_blank\" />\n        ),\n        align: 'left',\n        width: '15%',\n      },\n      { Header: 'Age', accessor: 'age', align: 'right' },\n    ],\n    []\n  );\n  const data = [\n    { name: 'Vy Nguyen', age: 50 },\n    { name: 'Hau Dao', age: 51 },\n    { name: 'Hanh Le', age: 80 },\n    { name: 'Tuan Thieu', age: 99 },\n    { name: 'Vinh Tony', age: 21 },\n  ];\n  return <Table data={data} columns={columns} />;\n}",
      "purpose_description": "This example demonstrates how to create a basic table with customizable column layouts in React. The table allows for specifying the width and text alignment of each column, providing flexibility in how data is presented. The example is particularly focused on showing how to define these properties using the `width` and `align` props for each column.",
      "technical_description": "The `ColumnLayout` component uses the `React.useMemo` hook to memoize the column definitions, ensuring that the columns are not recalculated on every render unless their dependencies change. The columns are defined as an array of objects, each representing a column in the table. Each column object includes properties such as `Header`, `accessor`, `Cell`, `align`, and `width`. The `Header` property defines the column header, while the `accessor` specifies the key in the data object that the column should display. The `Cell` property is a custom render function that allows for rendering complex content, such as a link in this example. The `align` and `width` properties are used to control the text alignment and width of the columns, respectively. The `data` array contains the rows of the table, each represented as an object with keys corresponding to the column accessors. The `Table` component is then rendered with the `data` and `columns` props, which are used to generate the table layout.",
      "patterns_description": "The example demonstrates the use of `React.useMemo` to optimize performance by memoizing the column definitions. This is a common pattern in React to prevent unnecessary recalculations and re-renders. The use of a custom `Cell` render function showcases the flexibility of React Table components, allowing developers to customize how data is displayed in each cell. Additionally, the separation of column definitions and data into distinct variables promotes a clear and maintainable code structure.",
      "use_cases_description": "This example is useful in scenarios where a developer needs to display tabular data with specific layout requirements, such as setting column widths and text alignment. It is particularly beneficial in applications where data presentation is critical, such as dashboards, admin panels, or any application that requires detailed data analysis and reporting. The ability to customize cell content with a render function also makes it suitable for applications that need to display complex data types, such as links or formatted text, within a table."
    },
    {
      "example_name": "Filters, Row Action, ActionButtons and Bulk Actions",
      "example_description": "**Using `Table.RowAction`**\nTo render one action or multiple actions menu for table.\n**Using `Table.ActionButtons`**\nTo render action buttons for table.\n**Using `Table.BulkActions`**\nTo render actions that applied for all the selected rows of the table.\n**Using `Table.Filters (Deprecated)` (Use [Filters](/web/Components/Filters) instead) and `Table.Filter`**\nTo filter table data.\n<Note\n  title=\"Notes\"\n  style={{ marginTop: theme.space.large, marginBottom: -theme.space.large }}\nTo use <strong>Table.Filters</strong> and <strong>Table.Filter</strong> with\n  Typescript, using <strong>Table.createFilters</strong> to ensure type safety.\n  See example code below for more information.\n</Note>\n```typescript\n/* Table.createFilters example */\n\ntype FilterTypes = {\n  dateRange?: {\n    endDate?: string;\n    startDate?: string;\n  };\n  leaveCategory?: string;\n  personnel?: string;\n  reportingPersonnel: string;\n  search?: string;\n  status: string[];\n};\n\nconst { Filters, Filter } = Table.createFilters<FilterTypes>();\n\nconst Component = () => {\n  return (\n    {/* Filters component will require the value and onChange to match with the FilterTypes above */}\n    <Filters value={...} onChange={...}>\n      {/* Filter component will take the filterKey then auto infer type of value and onChange for its render function */}\n      <Filter filterKey=\"search\">\n        {/* On below render function, the type of value will be `string | undefined` - according to FilterTypes['search'] */}\n        {({ value, onChange }) => (\n          <Input value={value} onChange={e => onChange(e.target.value)} />\n        )}\n      </Filter>\n    </Filters>\n  )\n}\n\n```\n```jsx live\nfunction TableFiler() {\n  const [selectedRows, setSelectedRows] = React.useState({});\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Personnel',\n        accessor: 'name',\n        Cell: ({ value }) => (\n          <Box style={{ display: 'flex', alignItems: 'center' }}>\n            <Box\n              sx={{\n                backgroundColor: 'blue-dark-30',\n                backgroundSize: 'cover',\n                width: theme.sizes.xxlarge,\n                height: theme.sizes.xxlarge,\n                borderRadius: '50%',\n                mr: 'small',\n              }}\n            />\n            <Button.Link href=\"#\" text={value} target=\"_blank\" />\n          </Box>\n        ),\n      },\n      {\n        Header: 'Start date',\n        accessor: 'startDate',\n      },\n      {\n        Header: 'End date',\n        accessor: 'endDate',\n      },\n      {\n        Header: 'Leave category',\n        accessor: 'leaveCategory',\n      },\n      {\n        Header: 'Duration',\n        accessor: 'duration',\n      },\n      {\n        Header: 'Remaining',\n        accessor: 'remaining',\n      },\n      {\n        Header: 'Status',\n        accessor: 'status',\n        Cell: ({ value }) => {\n          const intent = value === 'Approved' ? 'success' : 'warning';\n          return (\n            <Tag\n              text={value.toUpperCase()}\n              variant=\"outlined\"\n              intent={intent}\n            />\n          );\n        },\n      },\n      {\n        Header: 'More options',\n        accessor: 'deletable',\n        disableSortBy: true,\n        Cell: ({ value }) => {\n          return (\n            <Table.RowAction\n              actions={[\n                {\n                  icon: 'checkmark',\n                  text: 'Accept',\n                  onClick: () => alert('Accept leave'),\n                },\n                {\n                  icon: 'cancel',\n                  text: 'Decline',\n                  onClick: () => alert('Decline leave'),\n                  divider: 'bottom',\n                },\n                {\n                  icon: 'eye-outlined',\n                  text: 'View',\n                  onClick: () => alert('View leave'),\n                },\n                {\n                  icon: 'pencil-outlined',\n                  text: 'Edit',\n                  onClick: () => alert('Edit leave'),\n                },\n                value && {\n                  icon: 'trash-bin-outlined',\n                  text: 'Delete',\n                  intent: 'danger',\n                  divider: 'top',\n                  onClick: () => alert('Delete leave'),\n                },\n              ].filter(Boolean)}\n            />\n          );\n        },\n      },\n    ],\n    []\n  );\n  const [itemsPerPageValue, setItemsPerPageValue] = React.useState(20);\n  const itemsPerPageOptions = React.useMemo(() => [\n    { value: 20, text: '20 / page' },\n    { value: 50, text: '50 / page' },\n    { value: 100, text: '100 / page' },\n  ]);\n  const [currentPage, setCurrentPage] = React.useState(1);\n  const [loading, setLoading] = React.useState(false);\n  const [data, setData] = React.useState([]);\n  const paginatedData = React.useMemo(() => {\n    return chunk(itemsPerPageValue)(data);\n  }, [itemsPerPageValue, data]);\n  const initialFilterValues = {\n    status: ['Pending'],\n    reportingPersonnel: 'all',\n  };\n  const { filterValues, setFilterValues } = Table.useFiltersState({\n    initialValues: initialFilterValues,\n    cacheProvider,\n    cacheOnChange: true,\n  });\n  // prettier-ignore\n  const [savedFilterValues, setSavedFilterValues] =\n    React.useState(initialFilterValues);\n  const fetchData = () => {\n    setLoading(true);\n    fetchEmployees(savedFilterValues, tableData).then((res) => {\n      setData(res);\n      setLoading(false);\n    });\n  };\n  React.useEffect(() => {\n    fetchData();\n  }, [savedFilterValues]);\n  React.useEffect(() => {\n    if (currentPage > paginatedData.length && paginatedData.length > 0) {\n      setCurrentPage(paginatedData.length);\n    }\n  }, [itemsPerPageValue]);\n  return (\n    <Grid>\n      <Grid.Row>\n        <Grid.Col span={[24, 24, 24, 24, 24]}>\n          <Table.Filters\n            value={filterValues}\n            onChange={setFilterValues}\n            onSave={(value) =>\n              setSavedFilterValues({ ...savedFilterValues, ...value })\n            }\n            onReset={() => {\n              setFilterValues(initialFilterValues);\n              setSavedFilterValues(initialFilterValues);\n            }}\n            applyButtonProps={{\n              text: 'Apply',\n              onClick: () => setSavedFilterValues(filterValues),\n            }}\n            clearButtonProps={{\n              text: 'Clear',\n            }}\n            sx={{ mb: 'large' }}\n          >\n            <Table.Filter icon=\"search-outlined\" noCaret filterKey=\"search\">\n              {({ value, onChange }) => (\n                <Input\n                  value={value}\n                  onChange={(e) => onChange(e.target.value)}\n                  placeholder=\"Search by name, status or date\"\n                />\n              )}\n            </Table.Filter>\n            <Table.Filter filterKey=\"dateRange\" label=\"Date range\">\n              {({ value, onChange }) => (\n                <DatePicker.Range value={value} onChange={onChange} />\n              )}\n            </Table.Filter>\n            <Table.Filter label=\"Status\" filterKey=\"status\" clearable={false}>\n              {({ value, onChange }) => (\n                <Checkbox.Group\n                  value={value}\n                  onChange={onChange}\n                  options={[\n                    { value: 'Pending', text: 'Pending' },\n                    { value: 'Approved', text: 'Approved' },\n                    { value: 'Declined', text: 'Declined' },\n                  ]}\n                />\n              )}\n            </Table.Filter>\n            <Table.Filter label=\"Leave category\" filterKey=\"leaveCategory\">\n              {({ value, onChange }) => (\n                <Select\n                  value={value}\n                  onChange={onChange}\n                  options={[\n                    { value: 'Annual Leave', text: 'Annual Leave' },\n                    {\n                      value: 'Compassionate Leave',\n                      text: 'Compassionate Leave',\n                    },\n                    { value: 'Leisure Rules Day', text: 'Leisure Rules Day' },\n                    {\n                      value: 'Paid Paternity Leave',\n                      text: 'Paid Paternity Leave',\n                    },\n                    { value: 'Sick Leave', text: 'Sick Leave' },\n                    { value: 'Study Leave', text: 'Study Leave' },\n                    { value: 'Unpaid Leave', text: 'Unpaid Leave' },\n                    { value: 'Working From Home', text: 'Working From Home' },\n                  ]}\n                  placeholder=\"Select...\"\n                />\n              )}\n            </Table.Filter>\n            <Table.Filter label=\"Personnel\" filterKey=\"personnel\">\n              {({ value, onChange }) => (\n                <Select\n                  value={value}\n                  onChange={onChange}\n                  options={[\n                    { value: 'Vinh Hoang', text: 'Vinh Hoang' },\n                    { value: 'Kien Tran', text: 'Kien Tran' },\n                    { value: 'Hau Dao', text: 'Hau Dao' },\n                    { value: 'Minh Dinh', text: 'Minh Dinh' },\n                    { value: 'Tung Nguyen', text: 'Tung Nguyen' },\n                    { value: 'Thong Quach', text: 'Thong Quach' },\n                    { value: 'Khoa Thai', text: 'Khoa Thai' },\n                    { value: 'Son Trinh', text: 'Son Trinh' },\n                    { value: 'Sang Nguyen', text: 'Sang Nguyen' },\n                    { value: 'Thuong Huynh', text: 'Thuong Huynh' },\n                    { value: 'Anh Dau', text: 'Anh Dau' },\n                  ]}\n                  placeholder=\"Select...\"\n                />\n              )}\n            </Table.Filter>\n            <Table.Filter\n              label=\"Reporting personnel\"\n              filterKey=\"reportingPersonnel\"\n              clearable={false}\n              formatValue={(value) => {\n                return value.charAt(0).toUpperCase() + value.slice(1);\n              }}\n            >\n              {({ value, onChange }) => (\n                <Radio.Group\n                  value={value}\n                  onChange={onChange}\n                  options={[\n                    { value: 'direct', text: 'Direct' },\n                    { value: 'indirect', text: 'Indirect' },\n                    { value: 'all', text: 'All personnel' },\n                  ]}\n                />\n              )}\n            </Table.Filter>\n          </Table.Filters>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col span={[24, 24, 24, 24, 24]}>\n          <Table.ActionButtons\n            buttons={[\n              {\n                icon: 'add',\n                text: 'Add new leave request',\n                role: 'primary',\n                onClick: () => alert('Create new leave request'),\n              },\n            ]}\n            style={{\n              display: 'inline-block',\n            }}\n            sx={{ mb: 'large' }}\n          />\n          <Table.BulkActions\n            data={data}\n            selectedRows={selectedRows}\n            rowIdExtractor={(row) => row.id}\n            actions={[\n              {\n                icon: 'checkmark',\n                text: 'Approve',\n                intent: 'success',\n                onClick: () => alert('Approve rows'),\n              },\n              {\n                icon: 'cancel',\n                text: 'Decline',\n                intent: 'danger',\n                variant: 'outlined',\n                onClick: () => alert('Decline rows'),\n              },\n              {\n                icon: 'trash-bin-outlined',\n                text: 'Delete',\n                intent: 'danger',\n                variant: 'text',\n                divider: 'before',\n                onClick: () => alert('Decline rows'),\n              },\n            ]}\n            sx={{ mb: 'large' }}\n          />\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col span={[24, 24, 24, 24, 24]}>\n          <Table\n            data={paginatedData[currentPage - 1] || []}\n            columns={columns}\n            selectable\n            selectedRows={selectedRows}\n            onSelectedRowsChange={setSelectedRows}\n            loading={loading}\n            noData=\"There are currently no leave requests to display\"\n            horizontallySticky\n            pagination={{ current: currentPage, total: paginatedData.length }}\n            onPaginationChange={setCurrentPage}\n            itemsPerPage={{\n              value: itemsPerPageValue,\n              options: itemsPerPageOptions,\n            }}\n            onItemsPerPageChange={setItemsPerPageValue}\n            rows={{ rowIdExtractor: (row) => row.id }}\n          />\n        </Grid.Col>\n      </Grid.Row>\n    </Grid>\n  );\n}\n```",
      "code": "/* Table.createFilters example */\n\ntype FilterTypes = {\n  dateRange?: {\n    endDate?: string;\n    startDate?: string;\n  };\n  leaveCategory?: string;\n  personnel?: string;\n  reportingPersonnel: string;\n  search?: string;\n  status: string[];\n};\n\nconst { Filters, Filter } = Table.createFilters<FilterTypes>();\n\nconst Component = () => {\n  return (\n    {/* Filters component will require the value and onChange to match with the FilterTypes above */}\n    <Filters value={...} onChange={...}>\n      {/* Filter component will take the filterKey then auto infer type of value and onChange for its render function */}\n      <Filter filterKey=\"search\">\n        {/* On below render function, the type of value will be `string | undefined` - according to FilterTypes['search'] */}\n        {({ value, onChange }) => (\n          <Input value={value} onChange={e => onChange(e.target.value)} />\n        )}\n      </Filter>\n    </Filters>\n  )\n}\n\nfunction TableFiler() {\n  const [selectedRows, setSelectedRows] = React.useState({});\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Personnel',\n        accessor: 'name',\n        Cell: ({ value }) => (\n          <Box style={{ display: 'flex', alignItems: 'center' }}>\n            <Box\n              sx={{\n                backgroundColor: 'blue-dark-30',\n                backgroundSize: 'cover',\n                width: theme.sizes.xxlarge,\n                height: theme.sizes.xxlarge,\n                borderRadius: '50%',\n                mr: 'small',\n              }}\n            />\n            <Button.Link href=\"#\" text={value} target=\"_blank\" />\n          </Box>\n        ),\n      },\n      {\n        Header: 'Start date',\n        accessor: 'startDate',\n      },\n      {\n        Header: 'End date',\n        accessor: 'endDate',\n      },\n      {\n        Header: 'Leave category',\n        accessor: 'leaveCategory',\n      },\n      {\n        Header: 'Duration',\n        accessor: 'duration',\n      },\n      {\n        Header: 'Remaining',\n        accessor: 'remaining',\n      },\n      {\n        Header: 'Status',\n        accessor: 'status',\n        Cell: ({ value }) => {\n          const intent = value === 'Approved' ? 'success' : 'warning';\n          return (\n            <Tag\n              text={value.toUpperCase()}\n              variant=\"outlined\"\n              intent={intent}\n            />\n          );\n        },\n      },\n      {\n        Header: 'More options',\n        accessor: 'deletable',\n        disableSortBy: true,\n        Cell: ({ value }) => {\n          return (\n            <Table.RowAction\n              actions={[\n                {\n                  icon: 'checkmark',\n                  text: 'Accept',\n                  onClick: () => alert('Accept leave'),\n                },\n                {\n                  icon: 'cancel',\n                  text: 'Decline',\n                  onClick: () => alert('Decline leave'),\n                  divider: 'bottom',\n                },\n                {\n                  icon: 'eye-outlined',\n                  text: 'View',\n                  onClick: () => alert('View leave'),\n                },\n                {\n                  icon: 'pencil-outlined',\n                  text: 'Edit',\n                  onClick: () => alert('Edit leave'),\n                },\n                value && {\n                  icon: 'trash-bin-outlined',\n                  text: 'Delete',\n                  intent: 'danger',\n                  divider: 'top',\n                  onClick: () => alert('Delete leave'),\n                },\n              ].filter(Boolean)}\n            />\n          );\n        },\n      },\n    ],\n    []\n  );\n  const [itemsPerPageValue, setItemsPerPageValue] = React.useState(20);\n  const itemsPerPageOptions = React.useMemo(() => [\n    { value: 20, text: '20 / page' },\n    { value: 50, text: '50 / page' },\n    { value: 100, text: '100 / page' },\n  ]);\n  const [currentPage, setCurrentPage] = React.useState(1);\n  const [loading, setLoading] = React.useState(false);\n  const [data, setData] = React.useState([]);\n  const paginatedData = React.useMemo(() => {\n    return chunk(itemsPerPageValue)(data);\n  }, [itemsPerPageValue, data]);\n  const initialFilterValues = {\n    status: ['Pending'],\n    reportingPersonnel: 'all',\n  };\n  const { filterValues, setFilterValues } = Table.useFiltersState({\n    initialValues: initialFilterValues,\n    cacheProvider,\n    cacheOnChange: true,\n  });\n  // prettier-ignore\n  const [savedFilterValues, setSavedFilterValues] =\n    React.useState(initialFilterValues);\n  const fetchData = () => {\n    setLoading(true);\n    fetchEmployees(savedFilterValues, tableData).then((res) => {\n      setData(res);\n      setLoading(false);\n    });\n  };\n  React.useEffect(() => {\n    fetchData();\n  }, [savedFilterValues]);\n  React.useEffect(() => {\n    if (currentPage > paginatedData.length && paginatedData.length > 0) {\n      setCurrentPage(paginatedData.length);\n    }\n  }, [itemsPerPageValue]);\n  return (\n    <Grid>\n      <Grid.Row>\n        <Grid.Col span={[24, 24, 24, 24, 24]}>\n          <Table.Filters\n            value={filterValues}\n            onChange={setFilterValues}\n            onSave={(value) =>\n              setSavedFilterValues({ ...savedFilterValues, ...value })\n            }\n            onReset={() => {\n              setFilterValues(initialFilterValues);\n              setSavedFilterValues(initialFilterValues);\n            }}\n            applyButtonProps={{\n              text: 'Apply',\n              onClick: () => setSavedFilterValues(filterValues),\n            }}\n            clearButtonProps={{\n              text: 'Clear',\n            }}\n            sx={{ mb: 'large' }}\n          >\n            <Table.Filter icon=\"search-outlined\" noCaret filterKey=\"search\">\n              {({ value, onChange }) => (\n                <Input\n                  value={value}\n                  onChange={(e) => onChange(e.target.value)}\n                  placeholder=\"Search by name, status or date\"\n                />\n              )}\n            </Table.Filter>\n            <Table.Filter filterKey=\"dateRange\" label=\"Date range\">\n              {({ value, onChange }) => (\n                <DatePicker.Range value={value} onChange={onChange} />\n              )}\n            </Table.Filter>\n            <Table.Filter label=\"Status\" filterKey=\"status\" clearable={false}>\n              {({ value, onChange }) => (\n                <Checkbox.Group\n                  value={value}\n                  onChange={onChange}\n                  options={[\n                    { value: 'Pending', text: 'Pending' },\n                    { value: 'Approved', text: 'Approved' },\n                    { value: 'Declined', text: 'Declined' },\n                  ]}\n                />\n              )}\n            </Table.Filter>\n            <Table.Filter label=\"Leave category\" filterKey=\"leaveCategory\">\n              {({ value, onChange }) => (\n                <Select\n                  value={value}\n                  onChange={onChange}\n                  options={[\n                    { value: 'Annual Leave', text: 'Annual Leave' },\n                    {\n                      value: 'Compassionate Leave',\n                      text: 'Compassionate Leave',\n                    },\n                    { value: 'Leisure Rules Day', text: 'Leisure Rules Day' },\n                    {\n                      value: 'Paid Paternity Leave',\n                      text: 'Paid Paternity Leave',\n                    },\n                    { value: 'Sick Leave', text: 'Sick Leave' },\n                    { value: 'Study Leave', text: 'Study Leave' },\n                    { value: 'Unpaid Leave', text: 'Unpaid Leave' },\n                    { value: 'Working From Home', text: 'Working From Home' },\n                  ]}\n                  placeholder=\"Select...\"\n                />\n              )}\n            </Table.Filter>\n            <Table.Filter label=\"Personnel\" filterKey=\"personnel\">\n              {({ value, onChange }) => (\n                <Select\n                  value={value}\n                  onChange={onChange}\n                  options={[\n                    { value: 'Vinh Hoang', text: 'Vinh Hoang' },\n                    { value: 'Kien Tran', text: 'Kien Tran' },\n                    { value: 'Hau Dao', text: 'Hau Dao' },\n                    { value: 'Minh Dinh', text: 'Minh Dinh' },\n                    { value: 'Tung Nguyen', text: 'Tung Nguyen' },\n                    { value: 'Thong Quach', text: 'Thong Quach' },\n                    { value: 'Khoa Thai', text: 'Khoa Thai' },\n                    { value: 'Son Trinh', text: 'Son Trinh' },\n                    { value: 'Sang Nguyen', text: 'Sang Nguyen' },\n                    { value: 'Thuong Huynh', text: 'Thuong Huynh' },\n                    { value: 'Anh Dau', text: 'Anh Dau' },\n                  ]}\n                  placeholder=\"Select...\"\n                />\n              )}\n            </Table.Filter>\n            <Table.Filter\n              label=\"Reporting personnel\"\n              filterKey=\"reportingPersonnel\"\n              clearable={false}\n              formatValue={(value) => {\n                return value.charAt(0).toUpperCase() + value.slice(1);\n              }}\n            >\n              {({ value, onChange }) => (\n                <Radio.Group\n                  value={value}\n                  onChange={onChange}\n                  options={[\n                    { value: 'direct', text: 'Direct' },\n                    { value: 'indirect', text: 'Indirect' },\n                    { value: 'all', text: 'All personnel' },\n                  ]}\n                />\n              )}\n            </Table.Filter>\n          </Table.Filters>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col span={[24, 24, 24, 24, 24]}>\n          <Table.ActionButtons\n            buttons={[\n              {\n                icon: 'add',\n                text: 'Add new leave request',\n                role: 'primary',\n                onClick: () => alert('Create new leave request'),\n              },\n            ]}\n            style={{\n              display: 'inline-block',\n            }}\n            sx={{ mb: 'large' }}\n          />\n          <Table.BulkActions\n            data={data}\n            selectedRows={selectedRows}\n            rowIdExtractor={(row) => row.id}\n            actions={[\n              {\n                icon: 'checkmark',\n                text: 'Approve',\n                intent: 'success',\n                onClick: () => alert('Approve rows'),\n              },\n              {\n                icon: 'cancel',\n                text: 'Decline',\n                intent: 'danger',\n                variant: 'outlined',\n                onClick: () => alert('Decline rows'),\n              },\n              {\n                icon: 'trash-bin-outlined',\n                text: 'Delete',\n                intent: 'danger',\n                variant: 'text',\n                divider: 'before',\n                onClick: () => alert('Decline rows'),\n              },\n            ]}\n            sx={{ mb: 'large' }}\n          />\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col span={[24, 24, 24, 24, 24]}>\n          <Table\n            data={paginatedData[currentPage - 1] || []}\n            columns={columns}\n            selectable\n            selectedRows={selectedRows}\n            onSelectedRowsChange={setSelectedRows}\n            loading={loading}\n            noData=\"There are currently no leave requests to display\"\n            horizontallySticky\n            pagination={{ current: currentPage, total: paginatedData.length }}\n            onPaginationChange={setCurrentPage}\n            itemsPerPage={{\n              value: itemsPerPageValue,\n              options: itemsPerPageOptions,\n            }}\n            onItemsPerPageChange={setItemsPerPageValue}\n            rows={{ rowIdExtractor: (row) => row.id }}\n          />\n        </Grid.Col>\n      </Grid.Row>\n    </Grid>\n  );\n}",
      "purpose_description": "This React component example demonstrates a comprehensive implementation of a table with advanced features such as filtering, row actions, action buttons, and bulk actions. It is designed to manage and display data related to leave requests, allowing users to interact with the data through various UI elements and actions.",
      "technical_description": "The component utilizes React hooks like useState and useMemo to manage state and optimize performance. It defines a set of columns for the table, each with specific properties such as Header, accessor, and Cell for custom rendering. The component also implements pagination and filtering using custom hooks and components. Filters are created using a type-safe approach with Table.createFilters, ensuring that the filter values and change handlers are correctly typed. The component handles data fetching and updates the table based on filter changes, using useEffect to trigger data fetching when filter values change. The table supports row selection, with selected rows managed via state, and provides bulk actions that can be applied to selected rows.",
      "patterns_description": "The example demonstrates several best practices and patterns in React development:\n- Use of React hooks (useState, useMemo, useEffect) for state management and side effects.\n- Type safety with TypeScript, particularly in defining filter types and ensuring type-safe filter operations.\n- Separation of concerns by modularizing table features into distinct components (e.g., Filters, ActionButtons, BulkActions).\n- Use of memoization to optimize performance by avoiding unnecessary re-renders.\n- Implementation of a responsive design using a Grid system for layout management.",
      "use_cases_description": "This example is particularly useful in scenarios where a complex data table is required, such as in HR management systems, project management tools, or any application that involves managing and interacting with tabular data. It provides a robust solution for handling data filtering, pagination, and user actions, making it suitable for enterprise-level applications where data manipulation and interaction are key requirements."
    }
  ]
}