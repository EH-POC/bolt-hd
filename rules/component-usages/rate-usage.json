{
  "component_name": "Rate",
  "component_description": "The rate can be used to show evaluation or a quick rating operation on something.",
  "props": {
    "className": {
      "name": "className",
      "type": "string",
      "required": false,
      "description": "A space-delimited list of class names to pass along to the element."
    },
    "data-test-id": {
      "name": "data-test-id",
      "type": "string",
      "required": false,
      "description": "Testing id of the element."
    },
    "disabled": {
      "name": "disabled",
      "type": "boolean",
      "required": false,
      "description": "Whether the rate is disabled."
    },
    "id": {
      "name": "id",
      "type": "string",
      "required": false,
      "description": "Id of the element."
    },
    "name": {
      "name": "name",
      "type": "string",
      "required": false,
      "description": "Rate name, used for form submission, this MUST be unique in a page, otherwise same name rate will share the same selection."
    },
    "onChange": {
      "name": "onChange",
      "type": "(value: T) => void",
      "required": false,
      "description": "Change event handler receiving selected rate's value."
    },
    "options": {
      "name": "options",
      "type": "Array<RateOption<T>>",
      "required": true,
      "description": "An array of rate options to be selected. Shape of an option:\n{\n  value: T;\n  tooltipContent?: string | ReactElement;\n}"
    },
    "readonly": {
      "name": "readonly",
      "type": "boolean",
      "required": false,
      "description": "Whether the rate is readonly."
    },
    "size": {
      "name": "size",
      "type": "\"medium\" | \"large\"",
      "required": false,
      "description": "Rate size."
    },
    "style": {
      "name": "style",
      "type": "CSSProperties",
      "required": false,
      "description": "Additional inline style to be applied for the most outer element of the component."
    },
    "sx": {
      "name": "sx",
      "type": "Partial<Record<SxKeys, SxValues>>",
      "required": false,
      "description": "[Theme-aware style property](/guidelines/sxProp)"
    },
    "value": {
      "name": "value",
      "type": "T",
      "required": false,
      "description": "Rate input value."
    }
  },
  "examples": [
    {
      "example_name": "Basic",
      "example_description": "Basic usage of it.\n```jsx live\nfunction BasicRate() {\n  const [rating, setRating] = useState(1);\n  return (\n    <Rate\n      value={rating}\n      name=\"rate\"\n      onChange={setRating}\n      options={[\n        { value: 1 },\n        { value: 2 },\n        { value: 3 },\n        { value: 4 },\n        { value: 5 },\n      ]}\n    />\n  );\n}\n```",
      "code": "function BasicRate() {\n  const [rating, setRating] = useState(1);\n  return (\n    <Rate\n      value={rating}\n      name=\"rate\"\n      onChange={setRating}\n      options={[\n        { value: 1 },\n        { value: 2 },\n        { value: 3 },\n        { value: 4 },\n        { value: 5 },\n      ]}\n    />\n  );\n}",
      "purpose_description": "The purpose of this example is to demonstrate the basic usage of a \"Rate\" component, which allows users to select a rating from a predefined set of options. This example shows how to initialize the component with a default rating and handle changes to the rating value.",
      "technical_description": "The example defines a functional component named `BasicRate` which utilizes React's `useState` hook to manage the state of the rating. The `useState` hook initializes the rating state to 1. The component returns a `Rate` component with several props: `value`, `name`, `onChange`, and `options`. The `value` prop is bound to the `rating` state, ensuring that the `Rate` component reflects the current rating. The `onChange` prop is set to the `setRating` function, which updates the state when the user selects a different rating. The `options` prop is an array of objects, each representing a possible rating value from 1 to 5.",
      "patterns_description": "This example demonstrates the use of React's `useState` hook for managing component state, a common pattern in functional components. It also shows how to pass state and event handlers as props to child components, allowing for controlled components where the parent component manages the state. The use of an array of objects for the `options` prop is a pattern that allows for flexible and scalable configuration of selectable options.",
      "use_cases_description": "This example is particularly useful in scenarios where a user needs to provide a rating or feedback, such as in product reviews, service evaluations, or any application where a rating system is required. It can be easily extended to include more complex logic, such as displaying average ratings or handling half-star ratings."
    },
    {
      "example_name": "Disable",
      "example_description": "The component can be disabled by passing `disabled`. **Use case**: disable this component (when it is used as a form field).\n```jsx live\nfunction DisabledRate() {\n  const [rating, setRating] = useState(1);\n  return (\n    <Rate\n      value={rating}\n      name=\"rate\"\n      onChange={setRating}\n      disabled\n      options={[\n        { value: 1 },\n        { value: 2 },\n        { value: 3 },\n        { value: 4 },\n        { value: 5 },\n      ]}\n    />\n  );\n}\n```\nThe component can be read-only by passing `readonly`. **Use case**: pure UI component.\n```jsx live\nfunction ReadonlyRate() {\n  return (\n    <Rate\n      value={1}\n      name=\"rate\"\n      readonly\n      options={[\n        { value: 1 },\n        { value: 2 },\n        { value: 3 },\n        { value: 4 },\n        { value: 5 },\n      ]}\n    />\n  );\n}\n```",
      "code": "function DisabledRate() {\n  const [rating, setRating] = useState(1);\n  return (\n    <Rate\n      value={rating}\n      name=\"rate\"\n      onChange={setRating}\n      disabled\n      options={[\n        { value: 1 },\n        { value: 2 },\n        { value: 3 },\n        { value: 4 },\n        { value: 5 },\n      ]}\n    />\n  );\n}\n\nfunction ReadonlyRate() {\n  return (\n    <Rate\n      value={1}\n      name=\"rate\"\n      readonly\n      options={[\n        { value: 1 },\n        { value: 2 },\n        { value: 3 },\n        { value: 4 },\n        { value: 5 },\n      ]}\n    />\n  );\n}",
      "purpose_description": "The purpose of the Rate component examples is to demonstrate how to configure a rating component to be either disabled or read-only. This is particularly useful in form scenarios where user input should be restricted or when the component is used purely for display purposes without user interaction.",
      "technical_description": "The DisabledRate component uses React's useState hook to manage the rating state, initialized to 1. The Rate component is rendered with several props: 'value' to set the current rating, 'name' for form identification, 'onChange' to update the state when the rating changes, 'disabled' to prevent user interaction, and 'options' to define the possible rating values. The ReadonlyRate component is simpler, as it does not manage state or handle changes. It sets a fixed rating value and uses the 'readonly' prop to prevent interaction, making it a static display component.",
      "patterns_description": "The examples demonstrate the use of controlled components in React, where the component's state is managed via React's state management (useState). The use of 'disabled' and 'readonly' props follows best practices for accessibility and user experience, ensuring that components behave predictably in different scenarios. The separation of interactive and non-interactive components is a common pattern in UI development.",
      "use_cases_description": "These examples are useful in scenarios where a rating component is part of a form and needs to be disabled based on certain conditions, such as when the form is in a read-only state or when user input is not allowed. The read-only example is particularly useful for displaying ratings in a static context, such as showing average ratings on a product page without allowing user input."
    }
  ]
}